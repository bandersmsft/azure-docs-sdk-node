### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-resources.Deployments'
    name: Deployments
    fullName: Deployments
    children:
      - '@azure/arm-resources.Deployments.beginCreateOrUpdate'
      - >-
        @azure/arm-resources.Deployments.beginCreateOrUpdateAtManagementGroupScope
      - '@azure/arm-resources.Deployments.beginCreateOrUpdateAtScope'
      - '@azure/arm-resources.Deployments.beginCreateOrUpdateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.beginCreateOrUpdateAtTenantScope'
      - '@azure/arm-resources.Deployments.beginDeleteAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.beginDeleteAtScope'
      - '@azure/arm-resources.Deployments.beginDeleteAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.beginDeleteAtTenantScope'
      - '@azure/arm-resources.Deployments.beginDeleteMethod'
      - '@azure/arm-resources.Deployments.beginValidate'
      - '@azure/arm-resources.Deployments.beginValidateAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.beginValidateAtScope'
      - '@azure/arm-resources.Deployments.beginValidateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.beginValidateAtTenantScope'
      - '@azure/arm-resources.Deployments.beginWhatIf'
      - '@azure/arm-resources.Deployments.beginWhatIfAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.beginWhatIfAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.beginWhatIfAtTenantScope'
      - '@azure/arm-resources.Deployments.calculateTemplateHash'
      - '@azure/arm-resources.Deployments.calculateTemplateHash_2'
      - '@azure/arm-resources.Deployments.calculateTemplateHash_1'
      - '@azure/arm-resources.Deployments.cancel'
      - '@azure/arm-resources.Deployments.cancel_2'
      - '@azure/arm-resources.Deployments.cancel_1'
      - '@azure/arm-resources.Deployments.cancelAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.cancelAtManagementGroupScope_2'
      - '@azure/arm-resources.Deployments.cancelAtManagementGroupScope_1'
      - '@azure/arm-resources.Deployments.cancelAtScope'
      - '@azure/arm-resources.Deployments.cancelAtScope_2'
      - '@azure/arm-resources.Deployments.cancelAtScope_1'
      - '@azure/arm-resources.Deployments.cancelAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.cancelAtTenantScope'
      - '@azure/arm-resources.Deployments.cancelAtTenantScope_2'
      - '@azure/arm-resources.Deployments.cancelAtTenantScope_1'
      - '@azure/arm-resources.Deployments.checkExistence'
      - '@azure/arm-resources.Deployments.checkExistence_2'
      - '@azure/arm-resources.Deployments.checkExistence_1'
      - '@azure/arm-resources.Deployments.checkExistenceAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.checkExistenceAtManagementGroupScope_2'
      - '@azure/arm-resources.Deployments.checkExistenceAtManagementGroupScope_1'
      - '@azure/arm-resources.Deployments.checkExistenceAtScope'
      - '@azure/arm-resources.Deployments.checkExistenceAtScope_2'
      - '@azure/arm-resources.Deployments.checkExistenceAtScope_1'
      - '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.checkExistenceAtTenantScope'
      - '@azure/arm-resources.Deployments.checkExistenceAtTenantScope_2'
      - '@azure/arm-resources.Deployments.checkExistenceAtTenantScope_1'
      - '@azure/arm-resources.Deployments.createOrUpdate'
      - '@azure/arm-resources.Deployments.createOrUpdateAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.createOrUpdateAtScope'
      - '@azure/arm-resources.Deployments.createOrUpdateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.createOrUpdateAtTenantScope'
      - '@azure/arm-resources.Deployments.deleteAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.deleteAtScope'
      - '@azure/arm-resources.Deployments.deleteAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.deleteAtTenantScope'
      - '@azure/arm-resources.Deployments.deleteMethod'
      - '@azure/arm-resources.Deployments.constructor'
      - '@azure/arm-resources.Deployments.exportTemplate'
      - '@azure/arm-resources.Deployments.exportTemplate_2'
      - '@azure/arm-resources.Deployments.exportTemplate_1'
      - '@azure/arm-resources.Deployments.exportTemplateAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.exportTemplateAtManagementGroupScope_2'
      - '@azure/arm-resources.Deployments.exportTemplateAtManagementGroupScope_1'
      - '@azure/arm-resources.Deployments.exportTemplateAtScope'
      - '@azure/arm-resources.Deployments.exportTemplateAtScope_2'
      - '@azure/arm-resources.Deployments.exportTemplateAtScope_1'
      - '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.exportTemplateAtTenantScope'
      - '@azure/arm-resources.Deployments.exportTemplateAtTenantScope_2'
      - '@azure/arm-resources.Deployments.exportTemplateAtTenantScope_1'
      - '@azure/arm-resources.Deployments.get'
      - '@azure/arm-resources.Deployments.get_2'
      - '@azure/arm-resources.Deployments.get_1'
      - '@azure/arm-resources.Deployments.getAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.getAtManagementGroupScope_2'
      - '@azure/arm-resources.Deployments.getAtManagementGroupScope_1'
      - '@azure/arm-resources.Deployments.getAtScope'
      - '@azure/arm-resources.Deployments.getAtScope_2'
      - '@azure/arm-resources.Deployments.getAtScope_1'
      - '@azure/arm-resources.Deployments.getAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.getAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.getAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.getAtTenantScope'
      - '@azure/arm-resources.Deployments.getAtTenantScope_2'
      - '@azure/arm-resources.Deployments.getAtTenantScope_1'
      - '@azure/arm-resources.Deployments.listAtManagementGroupScope_2'
      - '@azure/arm-resources.Deployments.listAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.listAtManagementGroupScope_1'
      - '@azure/arm-resources.Deployments.listAtManagementGroupScopeNext'
      - '@azure/arm-resources.Deployments.listAtManagementGroupScopeNext_2'
      - '@azure/arm-resources.Deployments.listAtManagementGroupScopeNext_1'
      - '@azure/arm-resources.Deployments.listAtScope_2'
      - '@azure/arm-resources.Deployments.listAtScope'
      - '@azure/arm-resources.Deployments.listAtScope_1'
      - '@azure/arm-resources.Deployments.listAtScopeNext'
      - '@azure/arm-resources.Deployments.listAtScopeNext_2'
      - '@azure/arm-resources.Deployments.listAtScopeNext_1'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScope_2'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScope_1'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_2'
      - '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_1'
      - '@azure/arm-resources.Deployments.listAtTenantScope_2'
      - '@azure/arm-resources.Deployments.listAtTenantScope'
      - '@azure/arm-resources.Deployments.listAtTenantScope_1'
      - '@azure/arm-resources.Deployments.listAtTenantScopeNext'
      - '@azure/arm-resources.Deployments.listAtTenantScopeNext_2'
      - '@azure/arm-resources.Deployments.listAtTenantScopeNext_1'
      - '@azure/arm-resources.Deployments.listByResourceGroup_2'
      - '@azure/arm-resources.Deployments.listByResourceGroup'
      - '@azure/arm-resources.Deployments.listByResourceGroup_1'
      - '@azure/arm-resources.Deployments.listByResourceGroupNext'
      - '@azure/arm-resources.Deployments.listByResourceGroupNext_2'
      - '@azure/arm-resources.Deployments.listByResourceGroupNext_1'
      - '@azure/arm-resources.Deployments.validate'
      - '@azure/arm-resources.Deployments.validateAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.validateAtScope'
      - '@azure/arm-resources.Deployments.validateAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.validateAtTenantScope'
      - '@azure/arm-resources.Deployments.whatIf'
      - '@azure/arm-resources.Deployments.whatIfAtManagementGroupScope'
      - '@azure/arm-resources.Deployments.whatIfAtSubscriptionScope'
      - '@azure/arm-resources.Deployments.whatIfAtTenantScope'
    langs:
      - typeScript
    type: class
    summary: Class representing a Deployments.
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginCreateOrUpdate'
    name: 'beginCreateOrUpdate(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is

            case insensitive. The resource group must already exist.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtManagementGroupScope'
    name: >-
      beginCreateOrUpdateAtManagementGroupScope(string, string,
      ScopedDeployment, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function beginCreateOrUpdateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtScope'
    name: >-
      beginCreateOrUpdateAtScope(string, string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function beginCreateOrUpdateAtScope(scope: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtSubscriptionScope'
    name: >-
      beginCreateOrUpdateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function beginCreateOrUpdateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginCreateOrUpdateAtTenantScope'
    name: >-
      beginCreateOrUpdateAtTenantScope(string, ScopedDeployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function beginCreateOrUpdateAtTenantScope(deploymentName: string,
        parameters: ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginDeleteAtManagementGroupScope'
    name: >-
      beginDeleteAtManagementGroupScope(string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function beginDeleteAtManagementGroupScope(groupId: string,
        deploymentName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginDeleteAtScope'
    name: 'beginDeleteAtScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function beginDeleteAtScope(scope: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginDeleteAtSubscriptionScope'
    name: 'beginDeleteAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function beginDeleteAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginDeleteAtTenantScope'
    name: 'beginDeleteAtTenantScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function beginDeleteAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginDeleteMethod'
    name: 'beginDeleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. Deleting a
      template deployment does not

      affect the state of the resource group. This is an asynchronous operation
      that returns a status

      of 202 until the template deployment is successfully deleted. The Location
      response header

      contains the URI that is used to obtain the status of the process. While
      the process is running,

      a call to the URI in the Location header returns a status of 202. When the
      process finishes, the

      URI in the Location header returns a status of 204 on success. If the
      asynchronous request

      failed, the URI in the Location header returns an error-level status code.
    syntax:
      content: >-
        function beginDeleteMethod(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to delete. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginValidate'
    name: 'beginValidate(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function beginValidate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginValidateAtManagementGroupScope'
    name: >-
      beginValidateAtManagementGroupScope(string, string, ScopedDeployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function beginValidateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginValidateAtScope'
    name: >-
      beginValidateAtScope(string, string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function beginValidateAtScope(scope: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginValidateAtSubscriptionScope'
    name: >-
      beginValidateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function beginValidateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginValidateAtTenantScope'
    name: >-
      beginValidateAtTenantScope(string, ScopedDeployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function beginValidateAtTenantScope(deploymentName: string, parameters:
        ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginWhatIf'
    name: 'beginWhatIf(string, string, DeploymentWhatIf, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the resource

      group.
    syntax:
      content: >-
        function beginWhatIf(resourceGroupName: string, deploymentName: string,
        parameters: DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.DeploymentWhatIf'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginWhatIfAtManagementGroupScope'
    name: >-
      beginWhatIfAtManagementGroupScope(string, string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the management

      group.
    syntax:
      content: >-
        function beginWhatIfAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeploymentWhatIf, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeploymentWhatIf'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginWhatIfAtSubscriptionScope'
    name: >-
      beginWhatIfAtSubscriptionScope(string, DeploymentWhatIf,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the

      subscription.
    syntax:
      content: >-
        function beginWhatIfAtSubscriptionScope(deploymentName: string,
        parameters: DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.DeploymentWhatIf'
          description: Parameters to What If.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.beginWhatIfAtTenantScope'
    name: >-
      beginWhatIfAtTenantScope(string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the tenant

      group.
    syntax:
      content: >-
        function beginWhatIfAtTenantScope(deploymentName: string, parameters:
        ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeploymentWhatIf'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.calculateTemplateHash'
    name: 'calculateTemplateHash(any, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Calculate the hash of the given template.
    syntax:
      content: >-
        function calculateTemplateHash(template: any, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: template
          type:
            - any
          description: The template provided to calculate hash.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCalculateTemplateHashResponse>
        description: Promise<Models.DeploymentsCalculateTemplateHashResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.calculateTemplateHash_2'
    name: >-
      calculateTemplateHash(any, RequestOptionsBase,
      ServiceCallback<TemplateHashResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function calculateTemplateHash(template: any, options:
        RequestOptionsBase, callback: ServiceCallback<TemplateHashResult>)
      parameters:
        - id: template
          type:
            - any
          description: The template provided to calculate hash.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.TemplateHashResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.calculateTemplateHash_1'
    name: 'calculateTemplateHash(any, ServiceCallback<TemplateHashResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function calculateTemplateHash(template: any, callback:
        ServiceCallback<TemplateHashResult>)
      parameters:
        - id: template
          type:
            - any
          description: The template provided to calculate hash.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.TemplateHashResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancel'
    name: 'cancel(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resource group

      partially deployed.
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancel_2'
    name: 'cancel(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancel_1'
    name: 'cancel(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancel(resourceGroupName: string, deploymentName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtManagementGroupScope'
    name: 'cancelAtManagementGroupScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    syntax:
      content: >-
        function cancelAtManagementGroupScope(groupId: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtManagementGroupScope_2'
    name: >-
      cancelAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtManagementGroupScope(groupId: string, deploymentName:
        string, options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtManagementGroupScope_1'
    name: 'cancelAtManagementGroupScope(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtManagementGroupScope(groupId: string, deploymentName:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtScope'
    name: 'cancelAtScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    syntax:
      content: >-
        function cancelAtScope(scope: string, deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtScope_2'
    name: 'cancelAtScope(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtScope(scope: string, deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtScope_1'
    name: 'cancelAtScope(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtScope(scope: string, deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtSubscriptionScope'
    name: 'cancelAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_2'
    name: >-
      cancelAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtSubscriptionScope_1'
    name: 'cancelAtSubscriptionScope(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtSubscriptionScope(deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtTenantScope'
    name: 'cancelAtTenantScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can cancel a deployment only if the provisioningState is Accepted or
      Running. After the

      deployment is canceled, the provisioningState is set to Canceled.
      Canceling a template

      deployment stops the currently running template deployment and leaves the
      resources partially

      deployed.
    syntax:
      content: >-
        function cancelAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtTenantScope_2'
    name: 'cancelAtTenantScope(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.cancelAtTenantScope_1'
    name: 'cancelAtTenantScope(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function cancelAtTenantScope(deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistence'
    name: 'checkExistence(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether the deployment exists.
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceResponse>
        description: Promise<Models.DeploymentsCheckExistenceResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistence_2'
    name: >-
      checkExistence(string, string, RequestOptionsBase,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistence_1'
    name: 'checkExistence(string, string, ServiceCallback<boolean>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistence(resourceGroupName: string, deploymentName:
        string, callback: ServiceCallback<boolean>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to check. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtManagementGroupScope'
    name: >-
      checkExistenceAtManagementGroupScope(string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether the deployment exists.
    syntax:
      content: >-
        function checkExistenceAtManagementGroupScope(groupId: string,
        deploymentName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>
        description: >-
          Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtManagementGroupScope_2'
    name: >-
      checkExistenceAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtManagementGroupScope(groupId: string,
        deploymentName: string, options: RequestOptionsBase, callback:
        ServiceCallback<boolean>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtManagementGroupScope_1'
    name: >-
      checkExistenceAtManagementGroupScope(string, string,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtManagementGroupScope(groupId: string,
        deploymentName: string, callback: ServiceCallback<boolean>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtScope'
    name: 'checkExistenceAtScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether the deployment exists.
    syntax:
      content: >-
        function checkExistenceAtScope(scope: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceAtScopeResponse>
        description: Promise<Models.DeploymentsCheckExistenceAtScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtScope_2'
    name: >-
      checkExistenceAtScope(string, string, RequestOptionsBase,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtScope(scope: string, deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtScope_1'
    name: 'checkExistenceAtScope(string, string, ServiceCallback<boolean>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtScope(scope: string, deploymentName: string,
        callback: ServiceCallback<boolean>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope'
    name: 'checkExistenceAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether the deployment exists.
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
        description: Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_2'
    name: >-
      checkExistenceAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        options: RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtSubscriptionScope_1'
    name: 'checkExistenceAtSubscriptionScope(string, ServiceCallback<boolean>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtSubscriptionScope(deploymentName: string,
        callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtTenantScope'
    name: 'checkExistenceAtTenantScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Checks whether the deployment exists.
    syntax:
      content: >-
        function checkExistenceAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>
        description: Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtTenantScope_2'
    name: >-
      checkExistenceAtTenantScope(string, RequestOptionsBase,
      ServiceCallback<boolean>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.checkExistenceAtTenantScope_1'
    name: 'checkExistenceAtTenantScope(string, ServiceCallback<boolean>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function checkExistenceAtTenantScope(deploymentName: string, callback:
        ServiceCallback<boolean>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<boolean>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.createOrUpdate'
    name: 'createOrUpdate(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function createOrUpdate(resourceGroupName: string, deploymentName:
        string, parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group to deploy the resources to. The name
            is

            case insensitive. The resource group must already exist.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCreateOrUpdateResponse>
        description: Promise<Models.DeploymentsCreateOrUpdateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.createOrUpdateAtManagementGroupScope'
    name: >-
      createOrUpdateAtManagementGroupScope(string, string, ScopedDeployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function createOrUpdateAtManagementGroupScope(groupId: string,
        deploymentName: string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
        description: >-
          Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.createOrUpdateAtScope'
    name: >-
      createOrUpdateAtScope(string, string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function createOrUpdateAtScope(scope: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>
        description: Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.createOrUpdateAtSubscriptionScope'
    name: >-
      createOrUpdateAtSubscriptionScope(string, Deployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function createOrUpdateAtSubscriptionScope(deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
        description: Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.createOrUpdateAtTenantScope'
    name: >-
      createOrUpdateAtTenantScope(string, ScopedDeployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      You can provide the template and parameters directly in the request or
      link to JSON files.
    syntax:
      content: >-
        function createOrUpdateAtTenantScope(deploymentName: string, parameters:
        ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Additional parameters supplied to the operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>
        description: Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.deleteAtManagementGroupScope'
    name: 'deleteAtManagementGroupScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function deleteAtManagementGroupScope(groupId: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.deleteAtScope'
    name: 'deleteAtScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function deleteAtScope(scope: string, deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.deleteAtSubscriptionScope'
    name: 'deleteAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function deleteAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.deleteAtTenantScope'
    name: 'deleteAtTenantScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. This is an
      asynchronous operation that

      returns a status of 202 until the template deployment is successfully
      deleted. The Location

      response header contains the URI that is used to obtain the status of the
      process. While the

      process is running, a call to the URI in the Location header returns a
      status of 202. When the

      process finishes, the URI in the Location header returns a status of 204
      on success. If the

      asynchronous request failed, the URI in the Location header returns an
      error-level status code.
    syntax:
      content: >-
        function deleteAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.deleteMethod'
    name: 'deleteMethod(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A template deployment that is currently running cannot be deleted.
      Deleting a template

      deployment removes the associated deployment operations. Deleting a
      template deployment does not

      affect the state of the resource group. This is an asynchronous operation
      that returns a status

      of 202 until the template deployment is successfully deleted. The Location
      response header

      contains the URI that is used to obtain the status of the process. While
      the process is running,

      a call to the URI in the Location header returns a status of 202. When the
      process finishes, the

      URI in the Location header returns a status of 204 on success. If the
      asynchronous request

      failed, the URI in the Location header returns an error-level status code.
    syntax:
      content: >-
        function deleteMethod(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployment to delete. The
            name

            is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.constructor'
    name: Deployments(ResourceManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Deployments.
    syntax:
      content: 'new Deployments(client: ResourceManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-resources.ResourceManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplate'
    name: 'exportTemplate(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Exports the template used for specified deployment.
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateResponse>
        description: Promise<Models.DeploymentsExportTemplateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplate_2'
    name: >-
      exportTemplate(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplate_1'
    name: 'exportTemplate(string, string, ServiceCallback<DeploymentExportResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplate(resourceGroupName: string, deploymentName:
        string, callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtManagementGroupScope'
    name: >-
      exportTemplateAtManagementGroupScope(string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Exports the template used for specified deployment.
    syntax:
      content: >-
        function exportTemplateAtManagementGroupScope(groupId: string,
        deploymentName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>
        description: >-
          Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtManagementGroupScope_2'
    name: >-
      exportTemplateAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtManagementGroupScope(groupId: string,
        deploymentName: string, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtManagementGroupScope_1'
    name: >-
      exportTemplateAtManagementGroupScope(string, string,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtManagementGroupScope(groupId: string,
        deploymentName: string, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtScope'
    name: 'exportTemplateAtScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Exports the template used for specified deployment.
    syntax:
      content: >-
        function exportTemplateAtScope(scope: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateAtScopeResponse>
        description: Promise<Models.DeploymentsExportTemplateAtScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtScope_2'
    name: >-
      exportTemplateAtScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtScope(scope: string, deploymentName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtScope_1'
    name: >-
      exportTemplateAtScope(string, string,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtScope(scope: string, deploymentName: string,
        callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope'
    name: 'exportTemplateAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Exports the template used for specified deployment.
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
        description: Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_2'
    name: >-
      exportTemplateAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtSubscriptionScope_1'
    name: >-
      exportTemplateAtSubscriptionScope(string,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtSubscriptionScope(deploymentName: string,
        callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtTenantScope'
    name: 'exportTemplateAtTenantScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Exports the template used for specified deployment.
    syntax:
      content: >-
        function exportTemplateAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>
        description: Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtTenantScope_2'
    name: >-
      exportTemplateAtTenantScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.exportTemplateAtTenantScope_1'
    name: >-
      exportTemplateAtTenantScope(string,
      ServiceCallback<DeploymentExportResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function exportTemplateAtTenantScope(deploymentName: string, callback:
        ServiceCallback<DeploymentExportResult>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExportResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.get'
    name: 'get(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a deployment.
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsGetResponse>
        description: Promise<Models.DeploymentsGetResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.get_2'
    name: >-
      get(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.get_1'
    name: 'get(string, string, ServiceCallback<DeploymentExtended>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function get(resourceGroupName: string, deploymentName: string,
        callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtManagementGroupScope'
    name: 'getAtManagementGroupScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a deployment.
    syntax:
      content: >-
        function getAtManagementGroupScope(groupId: string, deploymentName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>
        description: Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtManagementGroupScope_2'
    name: >-
      getAtManagementGroupScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtManagementGroupScope(groupId: string, deploymentName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtManagementGroupScope_1'
    name: >-
      getAtManagementGroupScope(string, string,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtManagementGroupScope(groupId: string, deploymentName:
        string, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtScope'
    name: 'getAtScope(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a deployment.
    syntax:
      content: >-
        function getAtScope(scope: string, deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsGetAtScopeResponse>
        description: Promise<Models.DeploymentsGetAtScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtScope_2'
    name: >-
      getAtScope(string, string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtScope(scope: string, deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtScope_1'
    name: 'getAtScope(string, string, ServiceCallback<DeploymentExtended>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtScope(scope: string, deploymentName: string, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtSubscriptionScope'
    name: 'getAtSubscriptionScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a deployment.
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
        description: Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtSubscriptionScope_2'
    name: >-
      getAtSubscriptionScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtSubscriptionScope_1'
    name: 'getAtSubscriptionScope(string, ServiceCallback<DeploymentExtended>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtSubscriptionScope(deploymentName: string, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtTenantScope'
    name: 'getAtTenantScope(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a deployment.
    syntax:
      content: >-
        function getAtTenantScope(deploymentName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsGetAtTenantScopeResponse>
        description: Promise<Models.DeploymentsGetAtTenantScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtTenantScope_2'
    name: >-
      getAtTenantScope(string, RequestOptionsBase,
      ServiceCallback<DeploymentExtended>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtTenantScope(deploymentName: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.getAtTenantScope_1'
    name: 'getAtTenantScope(string, ServiceCallback<DeploymentExtended>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAtTenantScope(deploymentName: string, callback:
        ServiceCallback<DeploymentExtended>)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentExtended>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtManagementGroupScope_2'
    name: >-
      listAtManagementGroupScope(string,
      DeploymentsListAtManagementGroupScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtManagementGroupScope(groupId: string, options:
        DeploymentsListAtManagementGroupScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: options
          type:
            - >-
              @azure/arm-resources.DeploymentsListAtManagementGroupScopeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtManagementGroupScope'
    name: >-
      listAtManagementGroupScope(string,
      Models.DeploymentsListAtManagementGroupScopeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a management group.
    syntax:
      content: >-
        function listAtManagementGroupScope(groupId: string, options?:
        Models.DeploymentsListAtManagementGroupScopeOptionalParams)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: options
          type:
            - Models.DeploymentsListAtManagementGroupScopeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtManagementGroupScopeResponse>
        description: Promise<Models.DeploymentsListAtManagementGroupScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtManagementGroupScope_1'
    name: 'listAtManagementGroupScope(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtManagementGroupScope(groupId: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtManagementGroupScopeNext'
    name: 'listAtManagementGroupScopeNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a management group.
    syntax:
      content: >-
        function listAtManagementGroupScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>
        description: Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtManagementGroupScopeNext_2'
    name: >-
      listAtManagementGroupScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtManagementGroupScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtManagementGroupScopeNext_1'
    name: >-
      listAtManagementGroupScopeNext(string,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtManagementGroupScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtScope_2'
    name: >-
      listAtScope(string, DeploymentsListAtScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtScope(scope: string, options:
        DeploymentsListAtScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: options
          type:
            - '@azure/arm-resources.DeploymentsListAtScopeOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtScope'
    name: 'listAtScope(string, Models.DeploymentsListAtScopeOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments at the given scope.
    syntax:
      content: >-
        function listAtScope(scope: string, options?:
        Models.DeploymentsListAtScopeOptionalParams)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: options
          type:
            - Models.DeploymentsListAtScopeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtScopeResponse>
        description: Promise<Models.DeploymentsListAtScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtScope_1'
    name: 'listAtScope(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtScope(scope: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtScopeNext'
    name: 'listAtScopeNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments at the given scope.
    syntax:
      content: >-
        function listAtScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtScopeNextResponse>
        description: Promise<Models.DeploymentsListAtScopeNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtScopeNext_2'
    name: >-
      listAtScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtScopeNext_1'
    name: 'listAtScopeNext(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScope_2'
    name: >-
      listAtSubscriptionScope(DeploymentsListAtSubscriptionScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScope(options:
        DeploymentsListAtSubscriptionScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: options
          type:
            - >-
              @azure/arm-resources.DeploymentsListAtSubscriptionScopeOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScope'
    name: >-
      listAtSubscriptionScope(Models.DeploymentsListAtSubscriptionScopeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a subscription.
    syntax:
      content: >-
        function listAtSubscriptionScope(options?:
        Models.DeploymentsListAtSubscriptionScopeOptionalParams)
      parameters:
        - id: options
          type:
            - Models.DeploymentsListAtSubscriptionScopeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
        description: Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScope_1'
    name: listAtSubscriptionScope(ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScope(callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext'
    name: 'listAtSubscriptionScopeNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a subscription.
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
        description: Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_2'
    name: >-
      listAtSubscriptionScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtSubscriptionScopeNext_1'
    name: 'listAtSubscriptionScopeNext(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtSubscriptionScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtTenantScope_2'
    name: >-
      listAtTenantScope(DeploymentsListAtTenantScopeOptionalParams,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtTenantScope(options:
        DeploymentsListAtTenantScopeOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: options
          type:
            - '@azure/arm-resources.DeploymentsListAtTenantScopeOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtTenantScope'
    name: listAtTenantScope(Models.DeploymentsListAtTenantScopeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments at the tenant scope.
    syntax:
      content: >-
        function listAtTenantScope(options?:
        Models.DeploymentsListAtTenantScopeOptionalParams)
      parameters:
        - id: options
          type:
            - Models.DeploymentsListAtTenantScopeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtTenantScopeResponse>
        description: Promise<Models.DeploymentsListAtTenantScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtTenantScope_1'
    name: listAtTenantScope(ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtTenantScope(callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtTenantScopeNext'
    name: 'listAtTenantScopeNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments at the tenant scope.
    syntax:
      content: >-
        function listAtTenantScopeNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListAtTenantScopeNextResponse>
        description: Promise<Models.DeploymentsListAtTenantScopeNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtTenantScopeNext_2'
    name: >-
      listAtTenantScopeNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtTenantScopeNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listAtTenantScopeNext_1'
    name: 'listAtTenantScopeNext(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listAtTenantScopeNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroup_2'
    name: >-
      listByResourceGroup(string, DeploymentsListByResourceGroupOptionalParams,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options:
        DeploymentsListByResourceGroupOptionalParams, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: options
          type:
            - '@azure/arm-resources.DeploymentsListByResourceGroupOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroup'
    name: >-
      listByResourceGroup(string,
      Models.DeploymentsListByResourceGroupOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a resource group.
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        Models.DeploymentsListByResourceGroupOptionalParams)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: options
          type:
            - Models.DeploymentsListByResourceGroupOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupResponse>
        description: Promise<Models.DeploymentsListByResourceGroupResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroup_1'
    name: 'listByResourceGroup(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: >-
            The name of the resource group with the deployments to get. The name
            is

            case insensitive.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroupNext'
    name: 'listByResourceGroupNext(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the deployments for a resource group.
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsListByResourceGroupNextResponse>
        description: Promise<Models.DeploymentsListByResourceGroupNextResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroupNext_2'
    name: >-
      listByResourceGroupNext(string, RequestOptionsBase,
      ServiceCallback<DeploymentListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, options:
        RequestOptionsBase, callback: ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.listByResourceGroupNext_1'
    name: 'listByResourceGroupNext(string, ServiceCallback<DeploymentListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listByResourceGroupNext(nextPageLink: string, callback:
        ServiceCallback<DeploymentListResult>)
      parameters:
        - id: nextPageLink
          type:
            - string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-resources.DeploymentListResult>
          description: |
            The callback
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validate'
    name: 'validate(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function validate(resourceGroupName: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsValidateResponse>
        description: Promise<Models.DeploymentsValidateResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validateAtManagementGroupScope'
    name: >-
      validateAtManagementGroupScope(string, string, ScopedDeployment,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function validateAtManagementGroupScope(groupId: string, deploymentName:
        string, parameters: ScopedDeployment, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>
        description: Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validateAtScope'
    name: 'validateAtScope(string, string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function validateAtScope(scope: string, deploymentName: string,
        parameters: Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: scope
          type:
            - string
          description: The resource scope.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsValidateAtScopeResponse>
        description: Promise<Models.DeploymentsValidateAtScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validateAtSubscriptionScope'
    name: 'validateAtSubscriptionScope(string, Deployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function validateAtSubscriptionScope(deploymentName: string, parameters:
        Deployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.Deployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
        description: Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.validateAtTenantScope'
    name: 'validateAtTenantScope(string, ScopedDeployment, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates whether the specified template is syntactically correct and will
      be accepted by Azure

      Resource Manager..
    syntax:
      content: >-
        function validateAtTenantScope(deploymentName: string, parameters:
        ScopedDeployment, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeployment'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsValidateAtTenantScopeResponse>
        description: Promise<Models.DeploymentsValidateAtTenantScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.whatIf'
    name: 'whatIf(string, string, DeploymentWhatIf, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the resource

      group.
    syntax:
      content: >-
        function whatIf(resourceGroupName: string, deploymentName: string,
        parameters: DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: |-
            The name of the resource group the template will be deployed to. The
            name is case insensitive.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.DeploymentWhatIf'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsWhatIfResponse>
        description: Promise<Models.DeploymentsWhatIfResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.whatIfAtManagementGroupScope'
    name: >-
      whatIfAtManagementGroupScope(string, string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the management

      group.
    syntax:
      content: >-
        function whatIfAtManagementGroupScope(groupId: string, deploymentName:
        string, parameters: ScopedDeploymentWhatIf, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: groupId
          type:
            - string
          description: The management group ID.
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeploymentWhatIf'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsWhatIfAtManagementGroupScopeResponse>
        description: Promise<Models.DeploymentsWhatIfAtManagementGroupScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.whatIfAtSubscriptionScope'
    name: >-
      whatIfAtSubscriptionScope(string, DeploymentWhatIf,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the

      subscription.
    syntax:
      content: >-
        function whatIfAtSubscriptionScope(deploymentName: string, parameters:
        DeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.DeploymentWhatIf'
          description: Parameters to What If.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>
        description: Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>
    package: '@azure/arm-resources'
  - uid: '@azure/arm-resources.Deployments.whatIfAtTenantScope'
    name: >-
      whatIfAtTenantScope(string, ScopedDeploymentWhatIf,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns changes that will be made by the deployment if executed at the
      scope of the tenant

      group.
    syntax:
      content: >-
        function whatIfAtTenantScope(deploymentName: string, parameters:
        ScopedDeploymentWhatIf, options?: msRest.RequestOptionsBase)
      parameters:
        - id: deploymentName
          type:
            - string
          description: The name of the deployment.
        - id: parameters
          type:
            - '@azure/arm-resources.ScopedDeploymentWhatIf'
          description: Parameters to validate.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DeploymentsWhatIfAtTenantScopeResponse>
        description: Promise<Models.DeploymentsWhatIfAtTenantScopeResponse>
    package: '@azure/arm-resources'
references:
  - uid: '@azure/arm-resources.ResourceManagementClientContext'
    name: ResourceManagementClientContext
    spec.typeScript:
      - name: ResourceManagementClientContext
        fullName: ResourceManagementClientContext
        uid: '@azure/arm-resources.ResourceManagementClientContext'
  - uid: '@azure/arm-resources.Deployment'
    name: Deployment
    spec.typeScript:
      - name: Deployment
        fullName: Deployment
        uid: '@azure/arm-resources.Deployment'
  - uid: '@azure/arm-resources.ScopedDeployment'
    name: ScopedDeployment
    spec.typeScript:
      - name: ScopedDeployment
        fullName: ScopedDeployment
        uid: '@azure/arm-resources.ScopedDeployment'
  - uid: '@azure/arm-resources.DeploymentWhatIf'
    name: DeploymentWhatIf
    spec.typeScript:
      - name: DeploymentWhatIf
        fullName: DeploymentWhatIf
        uid: '@azure/arm-resources.DeploymentWhatIf'
  - uid: '@azure/arm-resources.ScopedDeploymentWhatIf'
    name: ScopedDeploymentWhatIf
    spec.typeScript:
      - name: ScopedDeploymentWhatIf
        fullName: ScopedDeploymentWhatIf
        uid: '@azure/arm-resources.ScopedDeploymentWhatIf'
  - uid: ServiceCallback<@azure/arm-resources.TemplateHashResult>
    name: TemplateHashResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TemplateHashResult
        fullName: TemplateHashResult
        uid: '@azure/arm-resources.TemplateHashResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-resources.DeploymentExportResult>
    name: DeploymentExportResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeploymentExportResult
        fullName: DeploymentExportResult
        uid: '@azure/arm-resources.DeploymentExportResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-resources.DeploymentExtended>
    name: DeploymentExtended>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeploymentExtended
        fullName: DeploymentExtended
        uid: '@azure/arm-resources.DeploymentExtended'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-resources.DeploymentListResult>
    name: DeploymentListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DeploymentListResult
        fullName: DeploymentListResult
        uid: '@azure/arm-resources.DeploymentListResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/arm-resources.DeploymentsListAtManagementGroupScopeOptionalParams'
    name: DeploymentsListAtManagementGroupScopeOptionalParams
    spec.typeScript:
      - name: DeploymentsListAtManagementGroupScopeOptionalParams
        fullName: DeploymentsListAtManagementGroupScopeOptionalParams
        uid: >-
          @azure/arm-resources.DeploymentsListAtManagementGroupScopeOptionalParams
  - uid: '@azure/arm-resources.DeploymentsListAtScopeOptionalParams'
    name: DeploymentsListAtScopeOptionalParams
    spec.typeScript:
      - name: DeploymentsListAtScopeOptionalParams
        fullName: DeploymentsListAtScopeOptionalParams
        uid: '@azure/arm-resources.DeploymentsListAtScopeOptionalParams'
  - uid: '@azure/arm-resources.DeploymentsListAtSubscriptionScopeOptionalParams'
    name: DeploymentsListAtSubscriptionScopeOptionalParams
    spec.typeScript:
      - name: DeploymentsListAtSubscriptionScopeOptionalParams
        fullName: DeploymentsListAtSubscriptionScopeOptionalParams
        uid: '@azure/arm-resources.DeploymentsListAtSubscriptionScopeOptionalParams'
  - uid: '@azure/arm-resources.DeploymentsListAtTenantScopeOptionalParams'
    name: DeploymentsListAtTenantScopeOptionalParams
    spec.typeScript:
      - name: DeploymentsListAtTenantScopeOptionalParams
        fullName: DeploymentsListAtTenantScopeOptionalParams
        uid: '@azure/arm-resources.DeploymentsListAtTenantScopeOptionalParams'
  - uid: '@azure/arm-resources.DeploymentsListByResourceGroupOptionalParams'
    name: DeploymentsListByResourceGroupOptionalParams
    spec.typeScript:
      - name: DeploymentsListByResourceGroupOptionalParams
        fullName: DeploymentsListByResourceGroupOptionalParams
        uid: '@azure/arm-resources.DeploymentsListByResourceGroupOptionalParams'
