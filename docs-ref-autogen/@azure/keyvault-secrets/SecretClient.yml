### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-secrets.SecretClient'
    name: SecretClient
    fullName: SecretClient
    children:
      - '@azure/keyvault-secrets.SecretClient.backupSecret'
      - '@azure/keyvault-secrets.SecretClient.beginDeleteSecret'
      - '@azure/keyvault-secrets.SecretClient.beginRecoverDeletedSecret'
      - '@azure/keyvault-secrets.SecretClient.getDeletedSecret'
      - '@azure/keyvault-secrets.SecretClient.getSecret'
      - '@azure/keyvault-secrets.SecretClient.listDeletedSecrets'
      - '@azure/keyvault-secrets.SecretClient.listPropertiesOfSecrets'
      - '@azure/keyvault-secrets.SecretClient.listPropertiesOfSecretVersions'
      - '@azure/keyvault-secrets.SecretClient.purgeDeletedSecret'
      - '@azure/keyvault-secrets.SecretClient.restoreSecretBackup'
      - '@azure/keyvault-secrets.SecretClient.constructor'
      - '@azure/keyvault-secrets.SecretClient.setSecret'
      - '@azure/keyvault-secrets.SecretClient.updateSecretProperties'
      - '@azure/keyvault-secrets.SecretClient.vaultUrl'
    langs:
      - typeScript
    type: class
    summary: >-
      The SecretClient provides methods to manage <xref:KeyVaultSecret> in

      the Azure Key Vault. The client supports creating, retrieving, updating,

      deleting, purging, backing up, restoring and listing KeyVaultSecrets. The

      client also supports listing <xref:DeletedSecret> for a soft-delete
      enabled Azure

      Key Vault.
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.backupSecret'
    name: 'backupSecret(string, BackupSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified secret be downloaded to the
      client. All versions of the

      secret will be downloaded. This operation requires the secrets/backup
      permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      let backupResult = await client.backupSecret("MySecretName");

      ```
    syntax:
      content: 'function backupSecret(secretName: string, options?: BackupSecretOptions)'
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.BackupSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Uint8Array | undefined>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.beginDeleteSecret'
    name: 'beginDeleteSecret(string, BeginDeleteSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes a secret stored in Azure Key Vault.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the secret is deleted.

      This operation requires the secrets/delete permission.


      Example usage:

      ```ts

      const client = new SecretClient(url, credentials);

      await client.setSecret("MySecretName", "ABC123");


      const deletePoller = await client.beginDeleteSecret("MySecretName");


      // Serializing the poller

      const serialized = deletePoller.toString();


      // A new poller can be created with:

      // const newPoller = await client.beginDeleteSecret("MySecretName", {
      resumeFrom: serialized });


      // Waiting until it's done

      const deletedSecret = await deletePoller.pollUntilDone();

      console.log(deletedSecret);

      ```
    syntax:
      content: >-
        function beginDeleteSecret(name: string, options?:
        BeginDeleteSecretOptions)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/keyvault-secrets.BeginDeleteSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<PollOperationState<@azure/keyvault-secrets.DeletedSecret>,
            @azure/keyvault-secrets.DeletedSecret>>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.beginRecoverDeletedSecret'
    name: 'beginRecoverDeletedSecret(string, BeginRecoverDeletedSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted secret in the specified vault.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the secret is recovered.

      This operation requires the secrets/recover permission.


      Example usage:

      ```ts

      const client = new SecretClient(url, credentials);

      await client.setSecret("MySecretName", "ABC123");


      const deletePoller = await client.beginDeleteSecret("MySecretName");

      await deletePoller.pollUntilDone();


      const recoverPoller = await
      client.beginRecoverDeletedSecret("MySecretName");


      // Serializing the poller

      const serialized = recoverPoller.toString();


      // A new poller can be created with:

      // const newPoller = await
      client.beginRecoverDeletedSecret("MySecretName", { resumeFrom: serialized
      });


      // Waiting until it's done

      const deletedSecret = await recoverPoller.pollUntilDone();

      console.log(deletedSecret);

      ```
    syntax:
      content: >-
        function beginRecoverDeletedSecret(name: string, options?:
        BeginRecoverDeletedSecretOptions)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/keyvault-secrets.BeginRecoverDeletedSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<PollOperationState<@azure/keyvault-secrets.SecretProperties>,
            @azure/keyvault-secrets.SecretProperties>>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.getDeletedSecret'
    name: 'getDeletedSecret(string, GetDeletedSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getDeletedSecret method returns the specified deleted secret along
      with its attributes.

      This operation requires the secrets/get permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      await client.getDeletedSecret("MyDeletedSecret");

      ```
    syntax:
      content: >-
        function getDeletedSecret(secretName: string, options?:
        GetDeletedSecretOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.GetDeletedSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.DeletedSecret>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.getSecret'
    name: 'getSecret(string, GetSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getSecret method is applicable to any secret stored in Azure Key
      Vault. This operation requires

      the secrets/get permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      let secret = await client.getSecret("MySecretName");

      ```
    syntax:
      content: 'function getSecret(secretName: string, options?: GetSecretOptions)'
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.GetSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.KeyVaultSecret>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.listDeletedSecrets'
    name: listDeletedSecrets(ListDeletedSecretsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the deleted secrets in the vault.  The full secret identifier and
      attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      for await (const deletedSecret of client.listDeletedSecrets()) {
        console.log("deleted secret: ", deletedSecret);
      }

      ```
    syntax:
      content: 'function listDeletedSecrets(options?: ListDeletedSecretsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-secrets.ListDeletedSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - PagedAsyncIterableIterator<@azure/keyvault-secrets.DeletedSecret>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.listPropertiesOfSecrets'
    name: listPropertiesOfSecrets(ListPropertiesOfSecretsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the latest version of all secrets in the vault.  The full secret
      identifier and attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      for await (const secretProperties of client.listPropertiesOfSecrets()) {
        const secret = await client.getSecret(secretProperties.name);
        console.log("secret: ", secret);
      }

      ```
    syntax:
      content: >-
        function listPropertiesOfSecrets(options?:
        ListPropertiesOfSecretsOptions)
      parameters:
        - id: options
          type:
            - '@azure/keyvault-secrets.ListPropertiesOfSecretsOptions'
          description: ''
          optional: true
      return:
        type:
          - PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretProperties>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.listPropertiesOfSecretVersions'
    name: >-
      listPropertiesOfSecretVersions(string,
      ListPropertiesOfSecretVersionsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates all versions of the given secret in the vault. The full secret
      identifier and attributes are provided

      in the response. No values are returned for the secrets. This operations
      requires the secrets/list permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      for await (const secretProperties of
      client.listPropertiesOfSecretVersions("MySecretName")) {
        const secret = await client.getSecret(secretProperties.name);
        console.log("secret version: ", secret);
      }

      ```
    syntax:
      content: >-
        function listPropertiesOfSecretVersions(secretName: string, options?:
        ListPropertiesOfSecretVersionsOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: Name of the secret to fetch versions for.
        - id: options
          type:
            - '@azure/keyvault-secrets.ListPropertiesOfSecretVersionsOptions'
          description: ''
          optional: true
      return:
        type:
          - PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretProperties>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.purgeDeletedSecret'
    name: 'purgeDeletedSecret(string, PurgeDeletedSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The purge deleted secret operation removes the secret permanently, without
      the possibility of

      recovery. This operation can only be enabled on a soft-delete enabled
      vault. This operation

      requires the secrets/purge permission.

      Example usage:

      ```ts

      const client = new SecretClient(url, credentials);

      const deletePoller = await client.beginDeleteSecret("MySecretName");

      await deletePoller.pollUntilDone();

      await client.purgeDeletedSecret("MySecretName");

      ```
    syntax:
      content: >-
        function purgeDeletedSecret(secretName: string, options?:
        PurgeDeletedSecretOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.PurgeDeletedSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.restoreSecretBackup'
    name: 'restoreSecretBackup(Uint8Array, RestoreSecretBackupOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up secret, and all its versions, to a vault. This
      operation requires the

      secrets/restore permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      let mySecretBundle = await client.backupSecret("MySecretName");

      // ...

      await client.restoreSecretBackup(mySecretBundle);

      ```
    syntax:
      content: >-
        function restoreSecretBackup(secretBundleBackup: Uint8Array, options?:
        RestoreSecretBackupOptions)
      parameters:
        - id: secretBundleBackup
          type:
            - Uint8Array
          description: The backup blob associated with a secret bundle.
        - id: options
          type:
            - '@azure/keyvault-secrets.RestoreSecretBackupOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.SecretProperties>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.constructor'
    name: 'SecretClient(string, TokenCredential, SecretClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Creates an instance of SecretClient.
      Example usage:
      ```ts
      import { SecretClient } from "@azure/keyvault-secrets";
      import { DefaultAzureCredential } from "@azure/identity";

      let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let client = new SecretClient(vaultUrl, credentials);
      ```
    syntax:
      content: >-
        new SecretClient(vaultUrl: string, credential: TokenCredential,
        pipelineOptions?: SecretClientOptions)
      parameters:
        - id: vaultUrl
          type:
            - string
          description: the base URL to the vault.
        - id: credential
          type:
            - TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type:
            - '@azure/keyvault-secrets.SecretClientOptions'
          description: ''
          optional: true
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.setSecret'
    name: 'setSecret(string, string, SetSecretOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The setSecret method adds a secret or secret version to the Azure Key
      Vault. If the named secret

      already exists, Azure Key Vault creates a new version of that secret.

      This operation requires the secrets/set permission.

      Example usage:

      ```ts

      let client = new SecretClient(url, credentials);

      await client.setSecret("MySecretName", "ABC123");

      ```
    syntax:
      content: >-
        function setSecret(secretName: string, value: string, options?:
        SetSecretOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: value
          type:
            - string
          description: The value of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.SetSecretOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.KeyVaultSecret>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.updateSecretProperties'
    name: 'updateSecretProperties(string, string, UpdateSecretPropertiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The updateSecret method changes specified attributes of an existing stored
      secret. Properties that

      are not specified in the request are left unchanged. The value of a secret
      itself cannot be

      changed. This operation requires the secrets/set permission.

      Example usage:

      ```ts

      let secretName = "MySecretName";

      let client = new SecretClient(url, credentials);

      let secret = await client.getSecret(secretName);

      await client.updateSecretProperties(secretName, secret.properties.version,
      { enabled: false });

      ```
    syntax:
      content: >-
        function updateSecretProperties(secretName: string, secretVersion:
        string, options?: UpdateSecretPropertiesOptions)
      parameters:
        - id: secretName
          type:
            - string
          description: The name of the secret.
        - id: secretVersion
          type:
            - string
          description: The version of the secret.
        - id: options
          type:
            - '@azure/keyvault-secrets.UpdateSecretPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-secrets.SecretProperties>
        description: ''
    package: '@azure/keyvault-secrets'
  - uid: '@azure/keyvault-secrets.SecretClient.vaultUrl'
    name: vaultUrl
    fullName: vaultUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The base URL to the vault
    syntax:
      content: 'vaultUrl: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/keyvault-secrets'
references:
  - uid: '@azure/keyvault-secrets.SecretClientOptions'
    name: SecretClientOptions
    spec.typeScript:
      - name: SecretClientOptions
        fullName: SecretClientOptions
        uid: '@azure/keyvault-secrets.SecretClientOptions'
  - uid: '@azure/keyvault-secrets.BackupSecretOptions'
    name: BackupSecretOptions
    spec.typeScript:
      - name: BackupSecretOptions
        fullName: BackupSecretOptions
        uid: '@azure/keyvault-secrets.BackupSecretOptions'
  - uid: '@azure/keyvault-secrets.BeginDeleteSecretOptions'
    name: BeginDeleteSecretOptions
    spec.typeScript:
      - name: BeginDeleteSecretOptions
        fullName: BeginDeleteSecretOptions
        uid: '@azure/keyvault-secrets.BeginDeleteSecretOptions'
  - uid: >-
      Promise<PollerLike<PollOperationState<@azure/keyvault-secrets.DeletedSecret>,
      @azure/keyvault-secrets.DeletedSecret>>
    name: DeletedSecret>>
    spec.typeScript:
      - name: Promise<PollerLike<PollOperationState<
        fullName: Promise<PollerLike<PollOperationState<
      - name: DeletedSecret
        fullName: DeletedSecret
        uid: '@azure/keyvault-secrets.DeletedSecret'
      - name: '>, '
        fullName: '>, '
      - name: DeletedSecret
        fullName: DeletedSecret
        uid: '@azure/keyvault-secrets.DeletedSecret'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/keyvault-secrets.BeginRecoverDeletedSecretOptions'
    name: BeginRecoverDeletedSecretOptions
    spec.typeScript:
      - name: BeginRecoverDeletedSecretOptions
        fullName: BeginRecoverDeletedSecretOptions
        uid: '@azure/keyvault-secrets.BeginRecoverDeletedSecretOptions'
  - uid: >-
      Promise<PollerLike<PollOperationState<@azure/keyvault-secrets.SecretProperties>,
      @azure/keyvault-secrets.SecretProperties>>
    name: SecretProperties>>
    spec.typeScript:
      - name: Promise<PollerLike<PollOperationState<
        fullName: Promise<PollerLike<PollOperationState<
      - name: SecretProperties
        fullName: SecretProperties
        uid: '@azure/keyvault-secrets.SecretProperties'
      - name: '>, '
        fullName: '>, '
      - name: SecretProperties
        fullName: SecretProperties
        uid: '@azure/keyvault-secrets.SecretProperties'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/keyvault-secrets.GetDeletedSecretOptions'
    name: GetDeletedSecretOptions
    spec.typeScript:
      - name: GetDeletedSecretOptions
        fullName: GetDeletedSecretOptions
        uid: '@azure/keyvault-secrets.GetDeletedSecretOptions'
  - uid: Promise<@azure/keyvault-secrets.DeletedSecret>
    name: DeletedSecret>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedSecret
        fullName: DeletedSecret
        uid: '@azure/keyvault-secrets.DeletedSecret'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.GetSecretOptions'
    name: GetSecretOptions
    spec.typeScript:
      - name: GetSecretOptions
        fullName: GetSecretOptions
        uid: '@azure/keyvault-secrets.GetSecretOptions'
  - uid: Promise<@azure/keyvault-secrets.KeyVaultSecret>
    name: KeyVaultSecret>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: KeyVaultSecret
        fullName: KeyVaultSecret
        uid: '@azure/keyvault-secrets.KeyVaultSecret'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.ListDeletedSecretsOptions'
    name: ListDeletedSecretsOptions
    spec.typeScript:
      - name: ListDeletedSecretsOptions
        fullName: ListDeletedSecretsOptions
        uid: '@azure/keyvault-secrets.ListDeletedSecretsOptions'
  - uid: PagedAsyncIterableIterator<@azure/keyvault-secrets.DeletedSecret>
    name: DeletedSecret>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: DeletedSecret
        fullName: DeletedSecret
        uid: '@azure/keyvault-secrets.DeletedSecret'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.ListPropertiesOfSecretVersionsOptions'
    name: ListPropertiesOfSecretVersionsOptions
    spec.typeScript:
      - name: ListPropertiesOfSecretVersionsOptions
        fullName: ListPropertiesOfSecretVersionsOptions
        uid: '@azure/keyvault-secrets.ListPropertiesOfSecretVersionsOptions'
  - uid: PagedAsyncIterableIterator<@azure/keyvault-secrets.SecretProperties>
    name: SecretProperties>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: SecretProperties
        fullName: SecretProperties
        uid: '@azure/keyvault-secrets.SecretProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.ListPropertiesOfSecretsOptions'
    name: ListPropertiesOfSecretsOptions
    spec.typeScript:
      - name: ListPropertiesOfSecretsOptions
        fullName: ListPropertiesOfSecretsOptions
        uid: '@azure/keyvault-secrets.ListPropertiesOfSecretsOptions'
  - uid: '@azure/keyvault-secrets.PurgeDeletedSecretOptions'
    name: PurgeDeletedSecretOptions
    spec.typeScript:
      - name: PurgeDeletedSecretOptions
        fullName: PurgeDeletedSecretOptions
        uid: '@azure/keyvault-secrets.PurgeDeletedSecretOptions'
  - uid: '@azure/keyvault-secrets.RestoreSecretBackupOptions'
    name: RestoreSecretBackupOptions
    spec.typeScript:
      - name: RestoreSecretBackupOptions
        fullName: RestoreSecretBackupOptions
        uid: '@azure/keyvault-secrets.RestoreSecretBackupOptions'
  - uid: Promise<@azure/keyvault-secrets.SecretProperties>
    name: SecretProperties>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SecretProperties
        fullName: SecretProperties
        uid: '@azure/keyvault-secrets.SecretProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-secrets.SetSecretOptions'
    name: SetSecretOptions
    spec.typeScript:
      - name: SetSecretOptions
        fullName: SetSecretOptions
        uid: '@azure/keyvault-secrets.SetSecretOptions'
  - uid: '@azure/keyvault-secrets.UpdateSecretPropertiesOptions'
    name: UpdateSecretPropertiesOptions
    spec.typeScript:
      - name: UpdateSecretPropertiesOptions
        fullName: UpdateSecretPropertiesOptions
        uid: '@azure/keyvault-secrets.UpdateSecretPropertiesOptions'
