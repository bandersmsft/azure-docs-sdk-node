### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-cosmosdb.MongoDBResources'
    name: MongoDBResources
    fullName: MongoDBResources
    children:
      - '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBCollection'
      - '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBDatabase'
      - '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBCollection'
      - '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBDatabase'
      - >-
        @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToAutoscale
      - >-
        @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToManualThroughput
      - >-
        @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToAutoscale
      - >-
        @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToManualThroughput
      - >-
        @azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBCollectionThroughput
      - >-
        @azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBDatabaseThroughput
      - '@azure/arm-cosmosdb.MongoDBResources.createUpdateMongoDBCollection'
      - '@azure/arm-cosmosdb.MongoDBResources.createUpdateMongoDBDatabase'
      - '@azure/arm-cosmosdb.MongoDBResources.deleteMongoDBCollection'
      - '@azure/arm-cosmosdb.MongoDBResources.deleteMongoDBDatabase'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection_2'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection_1'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput_2'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput_1'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase_2'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase_1'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput_2'
      - '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput_1'
      - '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections'
      - '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections_2'
      - '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections_1'
      - '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases'
      - '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases_2'
      - '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases_1'
      - '@azure/arm-cosmosdb.MongoDBResources.migrateMongoDBCollectionToAutoscale'
      - >-
        @azure/arm-cosmosdb.MongoDBResources.migrateMongoDBCollectionToManualThroughput
      - '@azure/arm-cosmosdb.MongoDBResources.migrateMongoDBDatabaseToAutoscale'
      - >-
        @azure/arm-cosmosdb.MongoDBResources.migrateMongoDBDatabaseToManualThroughput
      - '@azure/arm-cosmosdb.MongoDBResources.constructor'
      - '@azure/arm-cosmosdb.MongoDBResources.updateMongoDBCollectionThroughput'
      - '@azure/arm-cosmosdb.MongoDBResources.updateMongoDBDatabaseThroughput'
    langs:
      - typeScript
    type: class
    summary: Class representing a MongoDBResources.
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBCollection'
    name: >-
      beginCreateUpdateMongoDBCollection(string, string, string, string,
      MongoDBCollectionCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB MongoDB Collection
    syntax:
      content: >-
        function beginCreateUpdateMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        createUpdateMongoDBCollectionParameters:
        MongoDBCollectionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: createUpdateMongoDBCollectionParameters
          type:
            - '@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters'
          description: |-
            The parameters to provide for the current MongoDB
            Collection.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.beginCreateUpdateMongoDBDatabase'
    name: >-
      beginCreateUpdateMongoDBDatabase(string, string, string,
      MongoDBDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or updates Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function beginCreateUpdateMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateMongoDBDatabaseParameters:
        MongoDBDatabaseCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: createUpdateMongoDBDatabaseParameters
          type:
            - '@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters'
          description: |-
            The parameters to provide for the current MongoDB
            database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBCollection'
    name: >-
      beginDeleteMongoDBCollection(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB MongoDB Collection.
    syntax:
      content: >-
        function beginDeleteMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.beginDeleteMongoDBDatabase'
    name: >-
      beginDeleteMongoDBDatabase(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB MongoDB database.
    syntax:
      content: >-
        function beginDeleteMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToAutoscale
    name: >-
      beginMigrateMongoDBCollectionToAutoscale(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
      autoscale
    syntax:
      content: >-
        function beginMigrateMongoDBCollectionToAutoscale(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBCollectionToManualThroughput
    name: >-
      beginMigrateMongoDBCollectionToManualThroughput(string, string, string,
      string, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
      throughput
    syntax:
      content: >-
        function
        beginMigrateMongoDBCollectionToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToAutoscale
    name: >-
      beginMigrateMongoDBDatabaseToAutoscale(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from manual throughput to
      autoscale
    syntax:
      content: >-
        function beginMigrateMongoDBDatabaseToAutoscale(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginMigrateMongoDBDatabaseToManualThroughput
    name: >-
      beginMigrateMongoDBDatabaseToManualThroughput(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
      throughput
    syntax:
      content: >-
        function
        beginMigrateMongoDBDatabaseToManualThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBCollectionThroughput
    name: >-
      beginUpdateMongoDBCollectionThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update the RUs per second of an Azure Cosmos DB MongoDB collection
    syntax:
      content: >-
        function beginUpdateMongoDBCollectionThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB collection.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.beginUpdateMongoDBDatabaseThroughput'
    name: >-
      beginUpdateMongoDBDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update RUs per second of the an Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function beginUpdateMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.createUpdateMongoDBCollection'
    name: >-
      createUpdateMongoDBCollection(string, string, string, string,
      MongoDBCollectionCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB MongoDB Collection
    syntax:
      content: >-
        function createUpdateMongoDBCollection(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        createUpdateMongoDBCollectionParameters:
        MongoDBCollectionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: createUpdateMongoDBCollectionParameters
          type:
            - '@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters'
          description: |-
            The parameters to provide for the current MongoDB
            Collection.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesCreateUpdateMongoDBCollectionResponse>
        description: Promise<Models.MongoDBResourcesCreateUpdateMongoDBCollectionResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.createUpdateMongoDBDatabase'
    name: >-
      createUpdateMongoDBDatabase(string, string, string,
      MongoDBDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or updates Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function createUpdateMongoDBDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateMongoDBDatabaseParameters:
        MongoDBDatabaseCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: createUpdateMongoDBDatabaseParameters
          type:
            - '@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters'
          description: |-
            The parameters to provide for the current MongoDB
            database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>
        description: Promise<Models.MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.deleteMongoDBCollection'
    name: >-
      deleteMongoDBCollection(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB MongoDB Collection.
    syntax:
      content: >-
        function deleteMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.deleteMongoDBDatabase'
    name: 'deleteMongoDBDatabase(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB MongoDB database.
    syntax:
      content: >-
        function deleteMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection'
    name: >-
      getMongoDBCollection(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the MongoDB collection under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function getMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.MongoDBResourcesGetMongoDBCollectionResponse>
        description: Promise<Models.MongoDBResourcesGetMongoDBCollectionResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection_2'
    name: >-
      getMongoDBCollection(string, string, string, string, RequestOptionsBase,
      ServiceCallback<MongoDBCollectionGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<MongoDBCollectionGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBCollectionGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollection_1'
    name: >-
      getMongoDBCollection(string, string, string, string,
      ServiceCallback<MongoDBCollectionGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollection(resourceGroupName: string, accountName:
        string, databaseName: string, collectionName: string, callback:
        ServiceCallback<MongoDBCollectionGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBCollectionGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput'
    name: >-
      getMongoDBCollectionThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the RUs per second of the MongoDB collection under an existing Azure
      Cosmos DB database

      account with the provided name.
    syntax:
      content: >-
        function getMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesGetMongoDBCollectionThroughputResponse>
        description: Promise<Models.MongoDBResourcesGetMongoDBCollectionThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput_2'
    name: >-
      getMongoDBCollectionThroughput(string, string, string, string,
      RequestOptionsBase, ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBCollectionThroughput_1'
    name: >-
      getMongoDBCollectionThroughput(string, string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase'
    name: 'getMongoDBDatabase(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the MongoDB databases under an existing Azure Cosmos DB database
      account with the provided

      name.
    syntax:
      content: >-
        function getMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.MongoDBResourcesGetMongoDBDatabaseResponse>
        description: Promise<Models.MongoDBResourcesGetMongoDBDatabaseResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase_2'
    name: >-
      getMongoDBDatabase(string, string, string, RequestOptionsBase,
      ServiceCallback<MongoDBDatabaseGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<MongoDBDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBDatabaseGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabase_1'
    name: >-
      getMongoDBDatabase(string, string, string,
      ServiceCallback<MongoDBDatabaseGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, callback:
        ServiceCallback<MongoDBDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBDatabaseGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput'
    name: >-
      getMongoDBDatabaseThroughput(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the RUs per second of the MongoDB database under an existing Azure
      Cosmos DB database

      account with the provided name.
    syntax:
      content: >-
        function getMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.MongoDBResourcesGetMongoDBDatabaseThroughputResponse>
        description: Promise<Models.MongoDBResourcesGetMongoDBDatabaseThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput_2'
    name: >-
      getMongoDBDatabaseThroughput(string, string, string, RequestOptionsBase,
      ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options: RequestOptionsBase,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.getMongoDBDatabaseThroughput_1'
    name: >-
      getMongoDBDatabaseThroughput(string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections'
    name: 'listMongoDBCollections(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the MongoDB collection under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function listMongoDBCollections(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.MongoDBResourcesListMongoDBCollectionsResponse>
        description: Promise<Models.MongoDBResourcesListMongoDBCollectionsResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections_2'
    name: >-
      listMongoDBCollections(string, string, string, RequestOptionsBase,
      ServiceCallback<MongoDBCollectionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listMongoDBCollections(resourceGroupName: string, accountName:
        string, databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<MongoDBCollectionListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBCollectionListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBCollections_1'
    name: >-
      listMongoDBCollections(string, string, string,
      ServiceCallback<MongoDBCollectionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listMongoDBCollections(resourceGroupName: string, accountName:
        string, databaseName: string, callback:
        ServiceCallback<MongoDBCollectionListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBCollectionListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases'
    name: 'listMongoDBDatabases(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the MongoDB databases under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function listMongoDBDatabases(resourceGroupName: string, accountName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.MongoDBResourcesListMongoDBDatabasesResponse>
        description: Promise<Models.MongoDBResourcesListMongoDBDatabasesResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases_2'
    name: >-
      listMongoDBDatabases(string, string, RequestOptionsBase,
      ServiceCallback<MongoDBDatabaseListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listMongoDBDatabases(resourceGroupName: string, accountName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<MongoDBDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBDatabaseListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.listMongoDBDatabases_1'
    name: >-
      listMongoDBDatabases(string, string,
      ServiceCallback<MongoDBDatabaseListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listMongoDBDatabases(resourceGroupName: string, accountName:
        string, callback: ServiceCallback<MongoDBDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.MongoDBDatabaseListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.migrateMongoDBCollectionToAutoscale'
    name: >-
      migrateMongoDBCollectionToAutoscale(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
      autoscale
    syntax:
      content: >-
        function migrateMongoDBCollectionToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse>
        description: >-
          Promise<Models.MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.MongoDBResources.migrateMongoDBCollectionToManualThroughput
    name: >-
      migrateMongoDBCollectionToManualThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
      throughput
    syntax:
      content: >-
        function migrateMongoDBCollectionToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, collectionName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse>
        description: >-
          Promise<Models.MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.migrateMongoDBDatabaseToAutoscale'
    name: >-
      migrateMongoDBDatabaseToAutoscale(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from manual throughput to
      autoscale
    syntax:
      content: >-
        function migrateMongoDBDatabaseToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>
        description: >-
          Promise<Models.MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.MongoDBResources.migrateMongoDBDatabaseToManualThroughput
    name: >-
      migrateMongoDBDatabaseToManualThroughput(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
      throughput
    syntax:
      content: >-
        function migrateMongoDBDatabaseToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse>
        description: >-
          Promise<Models.MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.constructor'
    name: MongoDBResources(CosmosDBManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a MongoDBResources.
    syntax:
      content: 'new MongoDBResources(client: CosmosDBManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-cosmosdb.CosmosDBManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.updateMongoDBCollectionThroughput'
    name: >-
      updateMongoDBCollectionThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update the RUs per second of an Azure Cosmos DB MongoDB collection
    syntax:
      content: >-
        function updateMongoDBCollectionThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, collectionName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: collectionName
          type:
            - string
          description: Cosmos DB collection name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB collection.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>
        description: >-
          Promise<Models.MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.MongoDBResources.updateMongoDBDatabaseThroughput'
    name: >-
      updateMongoDBDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update RUs per second of the an Azure Cosmos DB MongoDB database
    syntax:
      content: >-
        function updateMongoDBDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The RUs per second of the parameters to provide for the
            current MongoDB database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>
        description: >-
          Promise<Models.MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>
    package: '@azure/arm-cosmosdb'
references:
  - uid: '@azure/arm-cosmosdb.CosmosDBManagementClientContext'
    name: CosmosDBManagementClientContext
    spec.typeScript:
      - name: CosmosDBManagementClientContext
        fullName: CosmosDBManagementClientContext
        uid: '@azure/arm-cosmosdb.CosmosDBManagementClientContext'
  - uid: '@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters'
    name: MongoDBCollectionCreateUpdateParameters
    spec.typeScript:
      - name: MongoDBCollectionCreateUpdateParameters
        fullName: MongoDBCollectionCreateUpdateParameters
        uid: '@azure/arm-cosmosdb.MongoDBCollectionCreateUpdateParameters'
  - uid: '@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters'
    name: MongoDBDatabaseCreateUpdateParameters
    spec.typeScript:
      - name: MongoDBDatabaseCreateUpdateParameters
        fullName: MongoDBDatabaseCreateUpdateParameters
        uid: '@azure/arm-cosmosdb.MongoDBDatabaseCreateUpdateParameters'
  - uid: '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
    name: ThroughputSettingsUpdateParameters
    spec.typeScript:
      - name: ThroughputSettingsUpdateParameters
        fullName: ThroughputSettingsUpdateParameters
        uid: '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
  - uid: ServiceCallback<@azure/arm-cosmosdb.MongoDBCollectionGetResults>
    name: MongoDBCollectionGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: MongoDBCollectionGetResults
        fullName: MongoDBCollectionGetResults
        uid: '@azure/arm-cosmosdb.MongoDBCollectionGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
    name: ThroughputSettingsGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ThroughputSettingsGetResults
        fullName: ThroughputSettingsGetResults
        uid: '@azure/arm-cosmosdb.ThroughputSettingsGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.MongoDBDatabaseGetResults>
    name: MongoDBDatabaseGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: MongoDBDatabaseGetResults
        fullName: MongoDBDatabaseGetResults
        uid: '@azure/arm-cosmosdb.MongoDBDatabaseGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.MongoDBCollectionListResult>
    name: MongoDBCollectionListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: MongoDBCollectionListResult
        fullName: MongoDBCollectionListResult
        uid: '@azure/arm-cosmosdb.MongoDBCollectionListResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.MongoDBDatabaseListResult>
    name: MongoDBDatabaseListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: MongoDBDatabaseListResult
        fullName: MongoDBDatabaseListResult
        uid: '@azure/arm-cosmosdb.MongoDBDatabaseListResult'
      - name: '>'
        fullName: '>'
