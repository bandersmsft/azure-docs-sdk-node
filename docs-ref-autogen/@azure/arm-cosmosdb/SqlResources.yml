### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-cosmosdb.SqlResources'
    name: SqlResources
    fullName: SqlResources
    children:
      - '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlContainer'
      - '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlDatabase'
      - '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlStoredProcedure'
      - '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlTrigger'
      - '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlUserDefinedFunction'
      - '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlContainer'
      - '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlDatabase'
      - '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlStoredProcedure'
      - '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlTrigger'
      - '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlUserDefinedFunction'
      - '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToAutoscale'
      - >-
        @azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToManualThroughput
      - '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToAutoscale'
      - >-
        @azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToManualThroughput
      - '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlContainerThroughput'
      - '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlDatabaseThroughput'
      - '@azure/arm-cosmosdb.SqlResources.createUpdateSqlContainer'
      - '@azure/arm-cosmosdb.SqlResources.createUpdateSqlDatabase'
      - '@azure/arm-cosmosdb.SqlResources.createUpdateSqlStoredProcedure'
      - '@azure/arm-cosmosdb.SqlResources.createUpdateSqlTrigger'
      - '@azure/arm-cosmosdb.SqlResources.createUpdateSqlUserDefinedFunction'
      - '@azure/arm-cosmosdb.SqlResources.deleteSqlContainer'
      - '@azure/arm-cosmosdb.SqlResources.deleteSqlDatabase'
      - '@azure/arm-cosmosdb.SqlResources.deleteSqlStoredProcedure'
      - '@azure/arm-cosmosdb.SqlResources.deleteSqlTrigger'
      - '@azure/arm-cosmosdb.SqlResources.deleteSqlUserDefinedFunction'
      - '@azure/arm-cosmosdb.SqlResources.getSqlContainer'
      - '@azure/arm-cosmosdb.SqlResources.getSqlContainer_2'
      - '@azure/arm-cosmosdb.SqlResources.getSqlContainer_1'
      - '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput'
      - '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput_2'
      - '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput_1'
      - '@azure/arm-cosmosdb.SqlResources.getSqlDatabase'
      - '@azure/arm-cosmosdb.SqlResources.getSqlDatabase_2'
      - '@azure/arm-cosmosdb.SqlResources.getSqlDatabase_1'
      - '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput'
      - '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput_2'
      - '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput_1'
      - '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure'
      - '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure_2'
      - '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure_1'
      - '@azure/arm-cosmosdb.SqlResources.getSqlTrigger'
      - '@azure/arm-cosmosdb.SqlResources.getSqlTrigger_2'
      - '@azure/arm-cosmosdb.SqlResources.getSqlTrigger_1'
      - '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction'
      - '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction_2'
      - '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction_1'
      - '@azure/arm-cosmosdb.SqlResources.listSqlContainers'
      - '@azure/arm-cosmosdb.SqlResources.listSqlContainers_2'
      - '@azure/arm-cosmosdb.SqlResources.listSqlContainers_1'
      - '@azure/arm-cosmosdb.SqlResources.listSqlDatabases'
      - '@azure/arm-cosmosdb.SqlResources.listSqlDatabases_2'
      - '@azure/arm-cosmosdb.SqlResources.listSqlDatabases_1'
      - '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures'
      - '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures_2'
      - '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures_1'
      - '@azure/arm-cosmosdb.SqlResources.listSqlTriggers'
      - '@azure/arm-cosmosdb.SqlResources.listSqlTriggers_2'
      - '@azure/arm-cosmosdb.SqlResources.listSqlTriggers_1'
      - '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions'
      - '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions_2'
      - '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions_1'
      - '@azure/arm-cosmosdb.SqlResources.migrateSqlContainerToAutoscale'
      - '@azure/arm-cosmosdb.SqlResources.migrateSqlContainerToManualThroughput'
      - '@azure/arm-cosmosdb.SqlResources.migrateSqlDatabaseToAutoscale'
      - '@azure/arm-cosmosdb.SqlResources.migrateSqlDatabaseToManualThroughput'
      - '@azure/arm-cosmosdb.SqlResources.constructor'
      - '@azure/arm-cosmosdb.SqlResources.updateSqlContainerThroughput'
      - '@azure/arm-cosmosdb.SqlResources.updateSqlDatabaseThroughput'
    langs:
      - typeScript
    type: class
    summary: Class representing a SqlResources.
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlContainer'
    name: >-
      beginCreateUpdateSqlContainer(string, string, string, string,
      SqlContainerCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL container
    syntax:
      content: >-
        function beginCreateUpdateSqlContainer(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: createUpdateSqlContainerParameters
          type:
            - '@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters'
          description: |-
            The parameters to provide for the current SQL
            container.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlDatabase'
    name: >-
      beginCreateUpdateSqlDatabase(string, string, string,
      SqlDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL database
    syntax:
      content: >-
        function beginCreateUpdateSqlDatabase(resourceGroupName: string,
        accountName: string, databaseName: string,
        createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: createUpdateSqlDatabaseParameters
          type:
            - '@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters'
          description: The parameters to provide for the current SQL database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlStoredProcedure'
    name: >-
      beginCreateUpdateSqlStoredProcedure(string, string, string, string,
      string, SqlStoredProcedureCreateUpdateParameters,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL storedProcedure
    syntax:
      content: >-
        function beginCreateUpdateSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, createUpdateSqlStoredProcedureParameters:
        SqlStoredProcedureCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type:
            - string
          description: Cosmos DB storedProcedure name.
        - id: createUpdateSqlStoredProcedureParameters
          type:
            - '@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters'
          description: |-
            The parameters to provide for the current SQL
            storedProcedure.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlTrigger'
    name: >-
      beginCreateUpdateSqlTrigger(string, string, string, string, string,
      SqlTriggerCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL trigger
    syntax:
      content: >-
        function beginCreateUpdateSqlTrigger(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        triggerName: string, createUpdateSqlTriggerParameters:
        SqlTriggerCreateUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: triggerName
          type:
            - string
          description: Cosmos DB trigger name.
        - id: createUpdateSqlTriggerParameters
          type:
            - '@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters'
          description: The parameters to provide for the current SQL trigger.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginCreateUpdateSqlUserDefinedFunction'
    name: >-
      beginCreateUpdateSqlUserDefinedFunction(string, string, string, string,
      string, SqlUserDefinedFunctionCreateUpdateParameters,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL userDefinedFunction
    syntax:
      content: >-
        function beginCreateUpdateSqlUserDefinedFunction(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, userDefinedFunctionName: string,
        createUpdateSqlUserDefinedFunctionParameters:
        SqlUserDefinedFunctionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type:
            - string
          description: Cosmos DB userDefinedFunction name.
        - id: createUpdateSqlUserDefinedFunctionParameters
          type:
            - '@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters'
          description: |-
            The parameters to provide for the current
            SQL userDefinedFunction.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlContainer'
    name: >-
      beginDeleteSqlContainer(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL container.
    syntax:
      content: >-
        function beginDeleteSqlContainer(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlDatabase'
    name: 'beginDeleteSqlDatabase(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL database.
    syntax:
      content: >-
        function beginDeleteSqlDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlStoredProcedure'
    name: >-
      beginDeleteSqlStoredProcedure(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL storedProcedure.
    syntax:
      content: >-
        function beginDeleteSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type:
            - string
          description: Cosmos DB storedProcedure name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlTrigger'
    name: >-
      beginDeleteSqlTrigger(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL trigger.
    syntax:
      content: >-
        function beginDeleteSqlTrigger(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, triggerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: triggerName
          type:
            - string
          description: Cosmos DB trigger name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginDeleteSqlUserDefinedFunction'
    name: >-
      beginDeleteSqlUserDefinedFunction(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
    syntax:
      content: >-
        function beginDeleteSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type:
            - string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToAutoscale'
    name: >-
      beginMigrateSqlContainerToAutoscale(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL container from manual throughput to
      autoscale
    syntax:
      content: >-
        function beginMigrateSqlContainerToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: >-
      @azure/arm-cosmosdb.SqlResources.beginMigrateSqlContainerToManualThroughput
    name: >-
      beginMigrateSqlContainerToManualThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL container from autoscale to manual
      throughput
    syntax:
      content: >-
        function beginMigrateSqlContainerToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToAutoscale'
    name: >-
      beginMigrateSqlDatabaseToAutoscale(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL database from manual throughput to
      autoscale
    syntax:
      content: >-
        function beginMigrateSqlDatabaseToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginMigrateSqlDatabaseToManualThroughput'
    name: >-
      beginMigrateSqlDatabaseToManualThroughput(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL database from autoscale to manual
      throughput
    syntax:
      content: >-
        function beginMigrateSqlDatabaseToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlContainerThroughput'
    name: >-
      beginUpdateSqlContainerThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update RUs per second of an Azure Cosmos DB SQL container
    syntax:
      content: >-
        function beginUpdateSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL container.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.beginUpdateSqlDatabaseThroughput'
    name: >-
      beginUpdateSqlDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update RUs per second of an Azure Cosmos DB SQL database
    syntax:
      content: >-
        function beginUpdateSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
        description: Promise<msRestAzure.LROPoller>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlContainer'
    name: >-
      createUpdateSqlContainer(string, string, string, string,
      SqlContainerCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL container
    syntax:
      content: >-
        function createUpdateSqlContainer(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: createUpdateSqlContainerParameters
          type:
            - '@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters'
          description: |-
            The parameters to provide for the current SQL
            container.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesCreateUpdateSqlContainerResponse>
        description: Promise<Models.SqlResourcesCreateUpdateSqlContainerResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlDatabase'
    name: >-
      createUpdateSqlDatabase(string, string, string,
      SqlDatabaseCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL database
    syntax:
      content: >-
        function createUpdateSqlDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, createUpdateSqlDatabaseParameters:
        SqlDatabaseCreateUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: createUpdateSqlDatabaseParameters
          type:
            - '@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters'
          description: The parameters to provide for the current SQL database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesCreateUpdateSqlDatabaseResponse>
        description: Promise<Models.SqlResourcesCreateUpdateSqlDatabaseResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlStoredProcedure'
    name: >-
      createUpdateSqlStoredProcedure(string, string, string, string, string,
      SqlStoredProcedureCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL storedProcedure
    syntax:
      content: >-
        function createUpdateSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, createUpdateSqlStoredProcedureParameters:
        SqlStoredProcedureCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type:
            - string
          description: Cosmos DB storedProcedure name.
        - id: createUpdateSqlStoredProcedureParameters
          type:
            - '@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters'
          description: |-
            The parameters to provide for the current SQL
            storedProcedure.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesCreateUpdateSqlStoredProcedureResponse>
        description: Promise<Models.SqlResourcesCreateUpdateSqlStoredProcedureResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlTrigger'
    name: >-
      createUpdateSqlTrigger(string, string, string, string, string,
      SqlTriggerCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL trigger
    syntax:
      content: >-
        function createUpdateSqlTrigger(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, triggerName:
        string, createUpdateSqlTriggerParameters:
        SqlTriggerCreateUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: triggerName
          type:
            - string
          description: Cosmos DB trigger name.
        - id: createUpdateSqlTriggerParameters
          type:
            - '@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters'
          description: The parameters to provide for the current SQL trigger.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesCreateUpdateSqlTriggerResponse>
        description: Promise<Models.SqlResourcesCreateUpdateSqlTriggerResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.createUpdateSqlUserDefinedFunction'
    name: >-
      createUpdateSqlUserDefinedFunction(string, string, string, string, string,
      SqlUserDefinedFunctionCreateUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create or update an Azure Cosmos DB SQL userDefinedFunction
    syntax:
      content: >-
        function createUpdateSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string,
        createUpdateSqlUserDefinedFunctionParameters:
        SqlUserDefinedFunctionCreateUpdateParameters, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type:
            - string
          description: Cosmos DB userDefinedFunction name.
        - id: createUpdateSqlUserDefinedFunctionParameters
          type:
            - '@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters'
          description: |-
            The parameters to provide for the current
            SQL userDefinedFunction.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>
        description: Promise<Models.SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlContainer'
    name: >-
      deleteSqlContainer(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL container.
    syntax:
      content: >-
        function deleteSqlContainer(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlDatabase'
    name: 'deleteSqlDatabase(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL database.
    syntax:
      content: >-
        function deleteSqlDatabase(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlStoredProcedure'
    name: >-
      deleteSqlStoredProcedure(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL storedProcedure.
    syntax:
      content: >-
        function deleteSqlStoredProcedure(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        storedProcedureName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type:
            - string
          description: Cosmos DB storedProcedure name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlTrigger'
    name: >-
      deleteSqlTrigger(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL trigger.
    syntax:
      content: >-
        function deleteSqlTrigger(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, triggerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: triggerName
          type:
            - string
          description: Cosmos DB trigger name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.deleteSqlUserDefinedFunction'
    name: >-
      deleteSqlUserDefinedFunction(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
    syntax:
      content: >-
        function deleteSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type:
            - string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: Promise<msRest.RestResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainer'
    name: 'getSqlContainer(string, string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the SQL container under an existing Azure Cosmos DB database account.
    syntax:
      content: >-
        function getSqlContainer(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesGetSqlContainerResponse>
        description: Promise<Models.SqlResourcesGetSqlContainerResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainer_2'
    name: >-
      getSqlContainer(string, string, string, string, RequestOptionsBase,
      ServiceCallback<SqlContainerGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlContainer(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options:
        RequestOptionsBase, callback: ServiceCallback<SqlContainerGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlContainerGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainer_1'
    name: >-
      getSqlContainer(string, string, string, string,
      ServiceCallback<SqlContainerGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlContainer(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, callback:
        ServiceCallback<SqlContainerGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlContainerGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput'
    name: >-
      getSqlContainerThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the RUs per second of the SQL container under an existing Azure
      Cosmos DB database account.
    syntax:
      content: >-
        function getSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesGetSqlContainerThroughputResponse>
        description: Promise<Models.SqlResourcesGetSqlContainerThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput_2'
    name: >-
      getSqlContainerThroughput(string, string, string, string,
      RequestOptionsBase, ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlContainerThroughput_1'
    name: >-
      getSqlContainerThroughput(string, string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabase'
    name: 'getSqlDatabase(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the SQL database under an existing Azure Cosmos DB database account
      with the provided name.
    syntax:
      content: >-
        function getSqlDatabase(resourceGroupName: string, accountName: string,
        databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesGetSqlDatabaseResponse>
        description: Promise<Models.SqlResourcesGetSqlDatabaseResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabase_2'
    name: >-
      getSqlDatabase(string, string, string, RequestOptionsBase,
      ServiceCallback<SqlDatabaseGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlDatabase(resourceGroupName: string, accountName: string,
        databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlDatabaseGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabase_1'
    name: >-
      getSqlDatabase(string, string, string,
      ServiceCallback<SqlDatabaseGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlDatabase(resourceGroupName: string, accountName: string,
        databaseName: string, callback: ServiceCallback<SqlDatabaseGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlDatabaseGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput'
    name: >-
      getSqlDatabaseThroughput(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the RUs per second of the SQL database under an existing Azure Cosmos
      DB database account

      with the provided name.
    syntax:
      content: >-
        function getSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesGetSqlDatabaseThroughputResponse>
        description: Promise<Models.SqlResourcesGetSqlDatabaseThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput_2'
    name: >-
      getSqlDatabaseThroughput(string, string, string, RequestOptionsBase,
      ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options: RequestOptionsBase,
        callback: ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlDatabaseThroughput_1'
    name: >-
      getSqlDatabaseThroughput(string, string, string,
      ServiceCallback<ThroughputSettingsGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, callback:
        ServiceCallback<ThroughputSettingsGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure'
    name: >-
      getSqlStoredProcedure(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the SQL storedProcedure under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function getSqlStoredProcedure(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string,
        storedProcedureName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type:
            - string
          description: Cosmos DB storedProcedure name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesGetSqlStoredProcedureResponse>
        description: Promise<Models.SqlResourcesGetSqlStoredProcedureResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure_2'
    name: >-
      getSqlStoredProcedure(string, string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlStoredProcedureGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlStoredProcedure(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string,
        storedProcedureName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlStoredProcedureGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type:
            - string
          description: Cosmos DB storedProcedure name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlStoredProcedureGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlStoredProcedure_1'
    name: >-
      getSqlStoredProcedure(string, string, string, string, string,
      ServiceCallback<SqlStoredProcedureGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlStoredProcedure(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string,
        storedProcedureName: string, callback:
        ServiceCallback<SqlStoredProcedureGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: storedProcedureName
          type:
            - string
          description: Cosmos DB storedProcedure name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlStoredProcedureGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlTrigger'
    name: >-
      getSqlTrigger(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the SQL trigger under an existing Azure Cosmos DB database account.
    syntax:
      content: >-
        function getSqlTrigger(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, triggerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: triggerName
          type:
            - string
          description: Cosmos DB trigger name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesGetSqlTriggerResponse>
        description: Promise<Models.SqlResourcesGetSqlTriggerResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlTrigger_2'
    name: >-
      getSqlTrigger(string, string, string, string, string, RequestOptionsBase,
      ServiceCallback<SqlTriggerGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlTrigger(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, triggerName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<SqlTriggerGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: triggerName
          type:
            - string
          description: Cosmos DB trigger name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlTriggerGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlTrigger_1'
    name: >-
      getSqlTrigger(string, string, string, string, string,
      ServiceCallback<SqlTriggerGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlTrigger(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, triggerName: string,
        callback: ServiceCallback<SqlTriggerGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: triggerName
          type:
            - string
          description: Cosmos DB trigger name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlTriggerGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction'
    name: >-
      getSqlUserDefinedFunction(string, string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the SQL userDefinedFunction under an existing Azure Cosmos DB
      database account.
    syntax:
      content: >-
        function getSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type:
            - string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesGetSqlUserDefinedFunctionResponse>
        description: Promise<Models.SqlResourcesGetSqlUserDefinedFunctionResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction_2'
    name: >-
      getSqlUserDefinedFunction(string, string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlUserDefinedFunctionGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlUserDefinedFunctionGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type:
            - string
          description: Cosmos DB userDefinedFunction name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/arm-cosmosdb.SqlUserDefinedFunctionGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.getSqlUserDefinedFunction_1'
    name: >-
      getSqlUserDefinedFunction(string, string, string, string, string,
      ServiceCallback<SqlUserDefinedFunctionGetResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getSqlUserDefinedFunction(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        userDefinedFunctionName: string, callback:
        ServiceCallback<SqlUserDefinedFunctionGetResults>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: userDefinedFunctionName
          type:
            - string
          description: Cosmos DB userDefinedFunction name.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/arm-cosmosdb.SqlUserDefinedFunctionGetResults>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlContainers'
    name: 'listSqlContainers(string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the SQL container under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function listSqlContainers(resourceGroupName: string, accountName:
        string, databaseName: string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesListSqlContainersResponse>
        description: Promise<Models.SqlResourcesListSqlContainersResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlContainers_2'
    name: >-
      listSqlContainers(string, string, string, RequestOptionsBase,
      ServiceCallback<SqlContainerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlContainers(resourceGroupName: string, accountName:
        string, databaseName: string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlContainerListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlContainerListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlContainers_1'
    name: >-
      listSqlContainers(string, string, string,
      ServiceCallback<SqlContainerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlContainers(resourceGroupName: string, accountName:
        string, databaseName: string, callback:
        ServiceCallback<SqlContainerListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlContainerListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlDatabases'
    name: 'listSqlDatabases(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the SQL databases under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function listSqlDatabases(resourceGroupName: string, accountName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesListSqlDatabasesResponse>
        description: Promise<Models.SqlResourcesListSqlDatabasesResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlDatabases_2'
    name: >-
      listSqlDatabases(string, string, RequestOptionsBase,
      ServiceCallback<SqlDatabaseListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlDatabases(resourceGroupName: string, accountName:
        string, options: RequestOptionsBase, callback:
        ServiceCallback<SqlDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlDatabaseListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlDatabases_1'
    name: 'listSqlDatabases(string, string, ServiceCallback<SqlDatabaseListResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlDatabases(resourceGroupName: string, accountName:
        string, callback: ServiceCallback<SqlDatabaseListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlDatabaseListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures'
    name: >-
      listSqlStoredProcedures(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the SQL storedProcedure under an existing Azure Cosmos DB database
      account.
    syntax:
      content: >-
        function listSqlStoredProcedures(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesListSqlStoredProceduresResponse>
        description: Promise<Models.SqlResourcesListSqlStoredProceduresResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures_2'
    name: >-
      listSqlStoredProcedures(string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlStoredProcedureListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlStoredProcedures(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, options:
        RequestOptionsBase, callback:
        ServiceCallback<SqlStoredProcedureListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlStoredProcedureListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlStoredProcedures_1'
    name: >-
      listSqlStoredProcedures(string, string, string, string,
      ServiceCallback<SqlStoredProcedureListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlStoredProcedures(resourceGroupName: string, accountName:
        string, databaseName: string, containerName: string, callback:
        ServiceCallback<SqlStoredProcedureListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlStoredProcedureListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlTriggers'
    name: 'listSqlTriggers(string, string, string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists the SQL trigger under an existing Azure Cosmos DB database account.
    syntax:
      content: >-
        function listSqlTriggers(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesListSqlTriggersResponse>
        description: Promise<Models.SqlResourcesListSqlTriggersResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlTriggers_2'
    name: >-
      listSqlTriggers(string, string, string, string, RequestOptionsBase,
      ServiceCallback<SqlTriggerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlTriggers(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, options:
        RequestOptionsBase, callback: ServiceCallback<SqlTriggerListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlTriggerListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlTriggers_1'
    name: >-
      listSqlTriggers(string, string, string, string,
      ServiceCallback<SqlTriggerListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlTriggers(resourceGroupName: string, accountName: string,
        databaseName: string, containerName: string, callback:
        ServiceCallback<SqlTriggerListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cosmosdb.SqlTriggerListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions'
    name: >-
      listSqlUserDefinedFunctions(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Lists the SQL userDefinedFunction under an existing Azure Cosmos DB
      database account.
    syntax:
      content: >-
        function listSqlUserDefinedFunctions(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesListSqlUserDefinedFunctionsResponse>
        description: Promise<Models.SqlResourcesListSqlUserDefinedFunctionsResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions_2'
    name: >-
      listSqlUserDefinedFunctions(string, string, string, string,
      RequestOptionsBase, ServiceCallback<SqlUserDefinedFunctionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlUserDefinedFunctions(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<SqlUserDefinedFunctionListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/arm-cosmosdb.SqlUserDefinedFunctionListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.listSqlUserDefinedFunctions_1'
    name: >-
      listSqlUserDefinedFunctions(string, string, string, string,
      ServiceCallback<SqlUserDefinedFunctionListResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listSqlUserDefinedFunctions(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        callback: ServiceCallback<SqlUserDefinedFunctionListResult>)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/arm-cosmosdb.SqlUserDefinedFunctionListResult>
          description: |
            The callback
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlContainerToAutoscale'
    name: >-
      migrateSqlContainerToAutoscale(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL container from manual throughput to
      autoscale
    syntax:
      content: >-
        function migrateSqlContainerToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesMigrateSqlContainerToAutoscaleResponse>
        description: Promise<Models.SqlResourcesMigrateSqlContainerToAutoscaleResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlContainerToManualThroughput'
    name: >-
      migrateSqlContainerToManualThroughput(string, string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL container from autoscale to manual
      throughput
    syntax:
      content: >-
        function migrateSqlContainerToManualThroughput(resourceGroupName:
        string, accountName: string, databaseName: string, containerName:
        string, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.SqlResourcesMigrateSqlContainerToManualThroughputResponse>
        description: >-
          Promise<Models.SqlResourcesMigrateSqlContainerToManualThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlDatabaseToAutoscale'
    name: >-
      migrateSqlDatabaseToAutoscale(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL database from manual throughput to
      autoscale
    syntax:
      content: >-
        function migrateSqlDatabaseToAutoscale(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>
        description: Promise<Models.SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.migrateSqlDatabaseToManualThroughput'
    name: >-
      migrateSqlDatabaseToManualThroughput(string, string, string,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Migrate an Azure Cosmos DB SQL database from autoscale to manual
      throughput
    syntax:
      content: >-
        function migrateSqlDatabaseToManualThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<Models.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>
        description: >-
          Promise<Models.SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.constructor'
    name: SqlResources(CosmosDBManagementClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a SqlResources.
    syntax:
      content: 'new SqlResources(client: CosmosDBManagementClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/arm-cosmosdb.CosmosDBManagementClientContext'
          description: |
            Reference to the service client.
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.updateSqlContainerThroughput'
    name: >-
      updateSqlContainerThroughput(string, string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update RUs per second of an Azure Cosmos DB SQL container
    syntax:
      content: >-
        function updateSqlContainerThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, containerName: string,
        updateThroughputParameters: ThroughputSettingsUpdateParameters,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: containerName
          type:
            - string
          description: Cosmos DB container name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL container.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesUpdateSqlContainerThroughputResponse>
        description: Promise<Models.SqlResourcesUpdateSqlContainerThroughputResponse>
    package: '@azure/arm-cosmosdb'
  - uid: '@azure/arm-cosmosdb.SqlResources.updateSqlDatabaseThroughput'
    name: >-
      updateSqlDatabaseThroughput(string, string, string,
      ThroughputSettingsUpdateParameters, msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: Update RUs per second of an Azure Cosmos DB SQL database
    syntax:
      content: >-
        function updateSqlDatabaseThroughput(resourceGroupName: string,
        accountName: string, databaseName: string, updateThroughputParameters:
        ThroughputSettingsUpdateParameters, options?: msRest.RequestOptionsBase)
      parameters:
        - id: resourceGroupName
          type:
            - string
          description: The name of the resource group. The name is case insensitive.
        - id: accountName
          type:
            - string
          description: Cosmos DB database account name.
        - id: databaseName
          type:
            - string
          description: Cosmos DB database name.
        - id: updateThroughputParameters
          type:
            - '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
          description: |-
            The parameters to provide for the RUs per second of the
            current SQL database.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SqlResourcesUpdateSqlDatabaseThroughputResponse>
        description: Promise<Models.SqlResourcesUpdateSqlDatabaseThroughputResponse>
    package: '@azure/arm-cosmosdb'
references:
  - uid: '@azure/arm-cosmosdb.CosmosDBManagementClientContext'
    name: CosmosDBManagementClientContext
    spec.typeScript:
      - name: CosmosDBManagementClientContext
        fullName: CosmosDBManagementClientContext
        uid: '@azure/arm-cosmosdb.CosmosDBManagementClientContext'
  - uid: '@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters'
    name: SqlContainerCreateUpdateParameters
    spec.typeScript:
      - name: SqlContainerCreateUpdateParameters
        fullName: SqlContainerCreateUpdateParameters
        uid: '@azure/arm-cosmosdb.SqlContainerCreateUpdateParameters'
  - uid: '@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters'
    name: SqlDatabaseCreateUpdateParameters
    spec.typeScript:
      - name: SqlDatabaseCreateUpdateParameters
        fullName: SqlDatabaseCreateUpdateParameters
        uid: '@azure/arm-cosmosdb.SqlDatabaseCreateUpdateParameters'
  - uid: '@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters'
    name: SqlStoredProcedureCreateUpdateParameters
    spec.typeScript:
      - name: SqlStoredProcedureCreateUpdateParameters
        fullName: SqlStoredProcedureCreateUpdateParameters
        uid: '@azure/arm-cosmosdb.SqlStoredProcedureCreateUpdateParameters'
  - uid: '@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters'
    name: SqlTriggerCreateUpdateParameters
    spec.typeScript:
      - name: SqlTriggerCreateUpdateParameters
        fullName: SqlTriggerCreateUpdateParameters
        uid: '@azure/arm-cosmosdb.SqlTriggerCreateUpdateParameters'
  - uid: '@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters'
    name: SqlUserDefinedFunctionCreateUpdateParameters
    spec.typeScript:
      - name: SqlUserDefinedFunctionCreateUpdateParameters
        fullName: SqlUserDefinedFunctionCreateUpdateParameters
        uid: '@azure/arm-cosmosdb.SqlUserDefinedFunctionCreateUpdateParameters'
  - uid: '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
    name: ThroughputSettingsUpdateParameters
    spec.typeScript:
      - name: ThroughputSettingsUpdateParameters
        fullName: ThroughputSettingsUpdateParameters
        uid: '@azure/arm-cosmosdb.ThroughputSettingsUpdateParameters'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlContainerGetResults>
    name: SqlContainerGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlContainerGetResults
        fullName: SqlContainerGetResults
        uid: '@azure/arm-cosmosdb.SqlContainerGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.ThroughputSettingsGetResults>
    name: ThroughputSettingsGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ThroughputSettingsGetResults
        fullName: ThroughputSettingsGetResults
        uid: '@azure/arm-cosmosdb.ThroughputSettingsGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlDatabaseGetResults>
    name: SqlDatabaseGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlDatabaseGetResults
        fullName: SqlDatabaseGetResults
        uid: '@azure/arm-cosmosdb.SqlDatabaseGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlStoredProcedureGetResults>
    name: SqlStoredProcedureGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlStoredProcedureGetResults
        fullName: SqlStoredProcedureGetResults
        uid: '@azure/arm-cosmosdb.SqlStoredProcedureGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlTriggerGetResults>
    name: SqlTriggerGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlTriggerGetResults
        fullName: SqlTriggerGetResults
        uid: '@azure/arm-cosmosdb.SqlTriggerGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlUserDefinedFunctionGetResults>
    name: SqlUserDefinedFunctionGetResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlUserDefinedFunctionGetResults
        fullName: SqlUserDefinedFunctionGetResults
        uid: '@azure/arm-cosmosdb.SqlUserDefinedFunctionGetResults'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlContainerListResult>
    name: SqlContainerListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlContainerListResult
        fullName: SqlContainerListResult
        uid: '@azure/arm-cosmosdb.SqlContainerListResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlDatabaseListResult>
    name: SqlDatabaseListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlDatabaseListResult
        fullName: SqlDatabaseListResult
        uid: '@azure/arm-cosmosdb.SqlDatabaseListResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlStoredProcedureListResult>
    name: SqlStoredProcedureListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlStoredProcedureListResult
        fullName: SqlStoredProcedureListResult
        uid: '@azure/arm-cosmosdb.SqlStoredProcedureListResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlTriggerListResult>
    name: SqlTriggerListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlTriggerListResult
        fullName: SqlTriggerListResult
        uid: '@azure/arm-cosmosdb.SqlTriggerListResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/arm-cosmosdb.SqlUserDefinedFunctionListResult>
    name: SqlUserDefinedFunctionListResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SqlUserDefinedFunctionListResult
        fullName: SqlUserDefinedFunctionListResult
        uid: '@azure/arm-cosmosdb.SqlUserDefinedFunctionListResult'
      - name: '>'
        fullName: '>'
