### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO'
    name: QueryDTO
    fullName: QueryDTO
    children:
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.context'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.isTest'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.qnaId'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.question'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.rankerType'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.scoreThreshold'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.strictFilters'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.top'
      - '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.userId'
    langs:
      - typeScript
    type: interface
    summary: POST body schema to query the knowledgebase.
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.context'
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: Context object with previous QnA's information.
    optional: true
    syntax:
      content: 'context?: QueryDTOContext'
      return:
        type:
          - '@azure/cognitiveservices-qnamaker-runtime.QueryDTOContext'
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.isTest'
    name: isTest
    fullName: isTest
    children: []
    langs:
      - typeScript
    type: property
    summary: Query against the test index.
    optional: true
    syntax:
      content: 'isTest?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.qnaId'
    name: qnaId
    fullName: qnaId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Exact qnaId to fetch from the knowledgebase, this field takes priority
      over question.
    optional: true
    syntax:
      content: 'qnaId?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.question'
    name: question
    fullName: question
    children: []
    langs:
      - typeScript
    type: property
    summary: User question to query against the knowledge base.
    optional: true
    syntax:
      content: 'question?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.rankerType'
    name: rankerType
    fullName: rankerType
    children: []
    langs:
      - typeScript
    type: property
    summary: Optional field. Set to 'QuestionOnly' for using a question only Ranker.
    optional: true
    syntax:
      content: 'rankerType?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.scoreThreshold'
    name: scoreThreshold
    fullName: scoreThreshold
    children: []
    langs:
      - typeScript
    type: property
    summary: Threshold for answers returned based on score.
    optional: true
    syntax:
      content: 'scoreThreshold?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.strictFilters'
    name: strictFilters
    fullName: strictFilters
    children: []
    langs:
      - typeScript
    type: property
    summary: Find only answers that contain these metadata.
    optional: true
    syntax:
      content: 'strictFilters?: MetadataDTO[]'
      return:
        type:
          - '@azure/cognitiveservices-qnamaker-runtime.MetadataDTO[]'
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.top'
    name: top
    fullName: top
    children: []
    langs:
      - typeScript
    type: property
    summary: Max number of answers to be returned for the question.
    optional: true
    syntax:
      content: 'top?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTO.userId'
    name: userId
    fullName: userId
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique identifier for the user.
    optional: true
    syntax:
      content: 'userId?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/cognitiveservices-qnamaker-runtime'
references:
  - uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTOContext'
    name: QueryDTOContext
    spec.typeScript:
      - name: QueryDTOContext
        fullName: QueryDTOContext
        uid: '@azure/cognitiveservices-qnamaker-runtime.QueryDTOContext'
  - uid: '@azure/cognitiveservices-qnamaker-runtime.MetadataDTO[]'
    name: 'MetadataDTO[]'
    spec.typeScript:
      - name: MetadataDTO
        fullName: MetadataDTO
        uid: '@azure/cognitiveservices-qnamaker-runtime.MetadataDTO'
      - name: '[]'
        fullName: '[]'
