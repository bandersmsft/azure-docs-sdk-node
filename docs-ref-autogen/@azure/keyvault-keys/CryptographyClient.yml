### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-keys.CryptographyClient'
    name: CryptographyClient
    fullName: CryptographyClient
    children:
      - '@azure/keyvault-keys.CryptographyClient.constructor'
      - '@azure/keyvault-keys.CryptographyClient.decrypt'
      - '@azure/keyvault-keys.CryptographyClient.encrypt'
      - '@azure/keyvault-keys.CryptographyClient.sign'
      - '@azure/keyvault-keys.CryptographyClient.signData'
      - '@azure/keyvault-keys.CryptographyClient.unwrapKey'
      - '@azure/keyvault-keys.CryptographyClient.vaultUrl'
      - '@azure/keyvault-keys.CryptographyClient.verify'
      - '@azure/keyvault-keys.CryptographyClient.verifyData'
      - '@azure/keyvault-keys.CryptographyClient.wrapKey'
    langs:
      - typeScript
    type: class
    summary: >-
      A client used to perform cryptographic operations with Azure Key Vault
      keys.
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.constructor'
    name: >-
      CryptographyClient(string | KeyVaultKey, TokenCredential,
      CryptographyClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Constructs a new instance of the Cryptography client for the given key
      Example usage:
      ```ts
      import { KeyClient, CryptographyClient } from "@azure/keyvault-keys";
      import { DefaultAzureCredential } from "@azure/identity";

      let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let keyClient = new KeyClient(vaultUrl, credentials);
      let keyVaultKey = await keyClient.getKey("MyKey");

      let client = new CryptographyClient(keyVaultKey.id, credentials);
      // or
      let client = new CryptographyClient(keyVaultKey, credentials);
      ```
    syntax:
      content: >-
        new CryptographyClient(key: string | KeyVaultKey, credential:
        TokenCredential, pipelineOptions?: CryptographyClientOptions)
      parameters:
        - id: key
          type:
            - string | @azure/keyvault-keys.KeyVaultKey
          description: >-
            The key to use during cryptography tasks. You can also pass the
            identifier of the key i.e its url here.
        - id: credential
          type:
            - TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type:
            - '@azure/keyvault-keys.CryptographyClientOptions'
          description: ''
          optional: true
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.decrypt'
    name: 'decrypt(EncryptionAlgorithm, Uint8Array, DecryptOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Decrypts the given ciphertext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.decrypt("RSA1_5", encryptedBuffer);
      ```
    syntax:
      content: >-
        function decrypt(algorithm: EncryptionAlgorithm, ciphertext: Uint8Array,
        options?: DecryptOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.EncryptionAlgorithm'
          description: The algorithm to use.
        - id: ciphertext
          type:
            - Uint8Array
          description: The text to decrypt.
        - id: options
          type:
            - '@azure/keyvault-keys.DecryptOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.DecryptResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.encrypt'
    name: 'encrypt(EncryptionAlgorithm, Uint8Array, EncryptOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Encrypts the given plaintext with the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.encrypt("RSA1_5", Buffer.from("My Message"));
      ```
    syntax:
      content: >-
        function encrypt(algorithm: EncryptionAlgorithm, plaintext: Uint8Array,
        options?: EncryptOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.EncryptionAlgorithm'
          description: The algorithm to use.
        - id: plaintext
          type:
            - Uint8Array
          description: The text to encrypt.
        - id: options
          type:
            - '@azure/keyvault-keys.EncryptOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.EncryptResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.sign'
    name: 'sign(SignatureAlgorithm, Uint8Array, SignOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Cryptographically sign the digest of a message
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.sign("RS256", digest);
      ```
    syntax:
      content: >-
        function sign(algorithm: SignatureAlgorithm, digest: Uint8Array,
        options?: SignOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.SignatureAlgorithm'
          description: The signing algorithm to use.
        - id: digest
          type:
            - Uint8Array
          description: The digest of the data to sign.
        - id: options
          type:
            - '@azure/keyvault-keys.SignOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.SignResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.signData'
    name: 'signData(SignatureAlgorithm, Uint8Array, SignOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Cryptographically sign a block of data
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.signData("RS256", message);
      ```
    syntax:
      content: >-
        function signData(algorithm: SignatureAlgorithm, data: Uint8Array,
        options?: SignOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.SignatureAlgorithm'
          description: The signing algorithm to use.
        - id: data
          type:
            - Uint8Array
          description: The data to sign.
        - id: options
          type:
            - '@azure/keyvault-keys.SignOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.SignResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.unwrapKey'
    name: 'unwrapKey(KeyWrapAlgorithm, Uint8Array, UnwrapKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Unwraps the given wrapped key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.unwrapKey("RSA1_5", keyToUnwrap);
      ```
    syntax:
      content: >-
        function unwrapKey(algorithm: KeyWrapAlgorithm, encryptedKey:
        Uint8Array, options?: UnwrapKeyOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeyWrapAlgorithm'
          description: The decryption algorithm to use to unwrap the key.
        - id: encryptedKey
          type:
            - Uint8Array
          description: The encrypted key to unwrap.
        - id: options
          type:
            - '@azure/keyvault-keys.UnwrapKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.UnwrapResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.vaultUrl'
    name: vaultUrl
    fullName: vaultUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The base URL to the vault
    syntax:
      content: 'vaultUrl: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.verify'
    name: 'verify(SignatureAlgorithm, Uint8Array, Uint8Array, VerifyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Verify the signed message digest
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.verify("RS256", signedDigest, signature);
      ```
    syntax:
      content: >-
        function verify(algorithm: SignatureAlgorithm, digest: Uint8Array,
        signature: Uint8Array, options?: VerifyOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.SignatureAlgorithm'
          description: The signing algorithm to use to verify with.
        - id: digest
          type:
            - Uint8Array
          description: The digest to verify.
        - id: signature
          type:
            - Uint8Array
          description: The signature to verify the digest against.
        - id: options
          type:
            - '@azure/keyvault-keys.VerifyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.VerifyResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.verifyData'
    name: 'verifyData(SignatureAlgorithm, Uint8Array, Uint8Array, VerifyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Verify the signed block of data
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.verifyData("RS256", signedMessage, signature);
      ```
    syntax:
      content: >-
        function verifyData(algorithm: SignatureAlgorithm, data: Uint8Array,
        signature: Uint8Array, options?: VerifyOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.SignatureAlgorithm'
          description: The algorithm to use to verify with.
        - id: data
          type:
            - Uint8Array
          description: The signed block of data to verify.
        - id: signature
          type:
            - Uint8Array
          description: The signature to verify the block against.
        - id: options
          type:
            - '@azure/keyvault-keys.VerifyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.VerifyResult>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.CryptographyClient.wrapKey'
    name: 'wrapKey(KeyWrapAlgorithm, Uint8Array, WrapKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Wraps the given key using the specified cryptography algorithm
      Example usage:
      ```ts
      let client = new CryptographyClient(keyVaultKey, credentials);
      let result = await client.wrapKey("RSA1_5", keyToWrap);
      ```
    syntax:
      content: >-
        function wrapKey(algorithm: KeyWrapAlgorithm, key: Uint8Array, options?:
        WrapKeyOptions)
      parameters:
        - id: algorithm
          type:
            - '@azure/keyvault-keys.KeyWrapAlgorithm'
          description: The encryption algorithm to use to wrap the given key.
        - id: key
          type:
            - Uint8Array
          description: The key to wrap.
        - id: options
          type:
            - '@azure/keyvault-keys.WrapKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.WrapResult>
        description: ''
    package: '@azure/keyvault-keys'
references:
  - uid: string | @azure/keyvault-keys.KeyVaultKey
    name: KeyVaultKey
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: KeyVaultKey
        fullName: KeyVaultKey
        uid: '@azure/keyvault-keys.KeyVaultKey'
  - uid: '@azure/keyvault-keys.CryptographyClientOptions'
    name: CryptographyClientOptions
    spec.typeScript:
      - name: CryptographyClientOptions
        fullName: CryptographyClientOptions
        uid: '@azure/keyvault-keys.CryptographyClientOptions'
  - uid: '@azure/keyvault-keys.EncryptionAlgorithm'
    name: EncryptionAlgorithm
    spec.typeScript:
      - name: EncryptionAlgorithm
        fullName: EncryptionAlgorithm
        uid: '@azure/keyvault-keys.EncryptionAlgorithm'
  - uid: '@azure/keyvault-keys.DecryptOptions'
    name: DecryptOptions
    spec.typeScript:
      - name: DecryptOptions
        fullName: DecryptOptions
        uid: '@azure/keyvault-keys.DecryptOptions'
  - uid: Promise<@azure/keyvault-keys.DecryptResult>
    name: DecryptResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DecryptResult
        fullName: DecryptResult
        uid: '@azure/keyvault-keys.DecryptResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.EncryptOptions'
    name: EncryptOptions
    spec.typeScript:
      - name: EncryptOptions
        fullName: EncryptOptions
        uid: '@azure/keyvault-keys.EncryptOptions'
  - uid: Promise<@azure/keyvault-keys.EncryptResult>
    name: EncryptResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: EncryptResult
        fullName: EncryptResult
        uid: '@azure/keyvault-keys.EncryptResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.SignatureAlgorithm'
    name: SignatureAlgorithm
    spec.typeScript:
      - name: SignatureAlgorithm
        fullName: SignatureAlgorithm
        uid: '@azure/keyvault-keys.SignatureAlgorithm'
  - uid: '@azure/keyvault-keys.SignOptions'
    name: SignOptions
    spec.typeScript:
      - name: SignOptions
        fullName: SignOptions
        uid: '@azure/keyvault-keys.SignOptions'
  - uid: Promise<@azure/keyvault-keys.SignResult>
    name: SignResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SignResult
        fullName: SignResult
        uid: '@azure/keyvault-keys.SignResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.KeyWrapAlgorithm'
    name: KeyWrapAlgorithm
    spec.typeScript:
      - name: KeyWrapAlgorithm
        fullName: KeyWrapAlgorithm
        uid: '@azure/keyvault-keys.KeyWrapAlgorithm'
  - uid: '@azure/keyvault-keys.UnwrapKeyOptions'
    name: UnwrapKeyOptions
    spec.typeScript:
      - name: UnwrapKeyOptions
        fullName: UnwrapKeyOptions
        uid: '@azure/keyvault-keys.UnwrapKeyOptions'
  - uid: Promise<@azure/keyvault-keys.UnwrapResult>
    name: UnwrapResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: UnwrapResult
        fullName: UnwrapResult
        uid: '@azure/keyvault-keys.UnwrapResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.VerifyOptions'
    name: VerifyOptions
    spec.typeScript:
      - name: VerifyOptions
        fullName: VerifyOptions
        uid: '@azure/keyvault-keys.VerifyOptions'
  - uid: Promise<@azure/keyvault-keys.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/keyvault-keys.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.WrapKeyOptions'
    name: WrapKeyOptions
    spec.typeScript:
      - name: WrapKeyOptions
        fullName: WrapKeyOptions
        uid: '@azure/keyvault-keys.WrapKeyOptions'
  - uid: Promise<@azure/keyvault-keys.WrapResult>
    name: WrapResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: WrapResult
        fullName: WrapResult
        uid: '@azure/keyvault-keys.WrapResult'
      - name: '>'
        fullName: '>'
