### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-keys.KeyClient'
    name: KeyClient
    fullName: KeyClient
    children:
      - '@azure/keyvault-keys.KeyClient.backupKey'
      - '@azure/keyvault-keys.KeyClient.beginDeleteKey'
      - '@azure/keyvault-keys.KeyClient.beginRecoverDeletedKey'
      - '@azure/keyvault-keys.KeyClient.createEcKey'
      - '@azure/keyvault-keys.KeyClient.createKey'
      - '@azure/keyvault-keys.KeyClient.createRsaKey'
      - '@azure/keyvault-keys.KeyClient.getDeletedKey'
      - '@azure/keyvault-keys.KeyClient.getKey'
      - '@azure/keyvault-keys.KeyClient.importKey'
      - '@azure/keyvault-keys.KeyClient.constructor'
      - '@azure/keyvault-keys.KeyClient.listDeletedKeys'
      - '@azure/keyvault-keys.KeyClient.listPropertiesOfKeys'
      - '@azure/keyvault-keys.KeyClient.listPropertiesOfKeyVersions'
      - '@azure/keyvault-keys.KeyClient.purgeDeletedKey'
      - '@azure/keyvault-keys.KeyClient.restoreKeyBackup'
      - '@azure/keyvault-keys.KeyClient.updateKeyProperties'
      - '@azure/keyvault-keys.KeyClient.vaultUrl'
    langs:
      - typeScript
    type: class
    summary: >-
      The KeyClient provides methods to manage <xref:KeyVaultKey> in the

      Azure Key Vault. The client supports creating, retrieving, updating,

      deleting, purging, backing up, restoring and listing KeyVaultKeys. The

      client also supports listing <xref:DeletedKey> for a soft-delete enabled
      Azure Key

      Vault.
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.backupKey'
    name: 'backupKey(string, BackupKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified key be downloaded to the client.
      All versions of the

      key will be downloaded. This operation requires the keys/backup
      permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      let backupContents = await client.backupKey("MyKey");

      ```
    syntax:
      content: 'function backupKey(name: string, options?: BackupKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.BackupKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Uint8Array | undefined>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.beginDeleteKey'
    name: 'beginDeleteKey(string, BeginDeleteKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The delete operation applies to any key stored in Azure Key Vault.
      Individual versions

      of a key can not be deleted, only all versions of a given key at once.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the key is deleted.


      This operation requires the keys/delete permission.


      Example usage:

      ```ts

      const client = new KeyClient(url, credentials);

      await client.createKey("MyKey", "EC");

      const poller = await client.beginDeleteKey("MyKey");


      // Serializing the poller

      const serialized = poller.toString();

      // A new poller can be created with:

      // await client.beginDeleteKey("MyKey", { resumeFrom: serialized });


      // Waiting until it's done

      const deletedKey = await poller.pollUntilDone();

      console.log(deletedKey);

      ```
    syntax:
      content: 'function beginDeleteKey(name: string, options?: BeginDeleteKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.BeginDeleteKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<PollOperationState<@azure/keyvault-keys.DeletedKey>,
            @azure/keyvault-keys.DeletedKey>>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.beginRecoverDeletedKey'
    name: 'beginRecoverDeletedKey(string, BeginRecoverDeletedKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted key in the specified vault. This operation can only
      be performed on a

      soft-delete enabled vault.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the deleted key is recovered.


      This operation requires the keys/recover permission.


      Example usage:

      ```ts

      const client = new KeyClient(url, credentials);

      await client.createKey("MyKey", "EC");

      const deletePoller = await client.beginDeleteKey("MyKey");

      await deletePoller.pollUntilDone();

      const poller = await client.beginRecoverDeletedKey("MyKey");


      // Serializing the poller

      const serialized = poller.toString();

      // A new poller can be created with:

      // await client.beginRecoverDeletedKey("MyKey", { resumeFrom: serialized
      });


      // Waiting until it's done

      const key = await poller.pollUntilDone();

      console.log(key);

      ```
    syntax:
      content: >-
        function beginRecoverDeletedKey(name: string, options?:
        BeginRecoverDeletedKeyOptions)
      parameters:
        - id: name
          type:
            - string
          description: The name of the deleted key.
        - id: options
          type:
            - '@azure/keyvault-keys.BeginRecoverDeletedKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<PollOperationState<@azure/keyvault-keys.DeletedKey>,
            @azure/keyvault-keys.DeletedKey>>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.createEcKey'
    name: 'createEcKey(string, CreateEcKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The createEcKey method creates a new elliptic curve key in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      let result = await client.createEcKey("MyKey", { curve: "P-256" });

      ```
    syntax:
      content: 'function createEcKey(name: string, options?: CreateEcKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateEcKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.KeyVaultKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.createKey'
    name: 'createKey(string, KeyType, CreateKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The create key operation can be used to create any key type in Azure Key
      Vault. If the named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      // Create an elliptic-curve key:

      let result = await client.createKey("MyKey", "EC");

      ```
    syntax:
      content: >-
        function createKey(name: string, keyType: KeyType, options?:
        CreateKeyOptions)
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: keyType
          type:
            - '@azure/keyvault-keys.KeyType'
          description: >-
            The type of the key. One of the following: 'EC', 'EC-HSM', 'RSA',
            'RSA-HSM', 'oct'.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.KeyVaultKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.createRsaKey'
    name: 'createRsaKey(string, CreateRsaKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The createRSAKey method creates a new RSA key in Azure Key Vault. If the
      named key

      already exists, Azure Key Vault creates a new version of the key. It
      requires the keys/create

      permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      let result = await client.createRsaKey("MyKey", { keySize: 2048 });

      ```
    syntax:
      content: 'function createRsaKey(name: string, options?: CreateRsaKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.CreateRsaKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.KeyVaultKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.getDeletedKey'
    name: 'getDeletedKey(string, GetDeletedKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getDeletedKey method returns the specified deleted key along with its
      properties.

      This operation requires the keys/get permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      let key = await client.getDeletedKey("MyDeletedKey");

      ```
    syntax:
      content: 'function getDeletedKey(name: string, options?: GetDeletedKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.GetDeletedKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.DeletedKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.getKey'
    name: 'getKey(string, GetKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getKey method gets a specified key and is applicable to any key stored
      in Azure Key Vault.

      This operation requires the keys/get permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      let key = await client.getKey("MyKey");

      ```
    syntax:
      content: 'function getKey(name: string, options?: GetKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.GetKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.KeyVaultKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.importKey'
    name: 'importKey(string, JsonWebKey, ImportKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The import key operation may be used to import any key type into an Azure
      Key Vault. If the

      named key already exists, Azure Key Vault creates a new version of the
      key. This operation

      requires the keys/import permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      // Key contents in myKeyContents

      let result = await client.importKey("MyKey", myKeyContents);

      ```
    syntax:
      content: >-
        function importKey(name: string, key: JsonWebKey, options?:
        ImportKeyOptions)
      parameters:
        - id: name
          type:
            - string
          description: Name for the imported key.
        - id: key
          type:
            - '@azure/keyvault-keys.JsonWebKey'
          description: The JSON web key.
        - id: options
          type:
            - '@azure/keyvault-keys.ImportKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.KeyVaultKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.constructor'
    name: 'KeyClient(string, TokenCredential, KeyClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Creates an instance of KeyClient.
      Example usage:
      ```ts
      import { KeyClient } from "@azure/keyvault-keys";
      import { DefaultAzureCredential } from "@azure/identity";

      let vaultUrl = `https://<MY KEYVAULT HERE>.vault.azure.net`;
      let credentials = new DefaultAzureCredential();

      let client = new KeyClient(vaultUrl, credentials);
      ```
    syntax:
      content: >-
        new KeyClient(vaultUrl: string, credential: TokenCredential,
        pipelineOptions?: KeyClientOptions)
      parameters:
        - id: vaultUrl
          type:
            - string
          description: >-
            the URL of the Key Vault. It should have this shape:
            https://${your-key-vault-name}.vault.azure.net
        - id: credential
          type:
            - TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type:
            - '@azure/keyvault-keys.KeyClientOptions'
          description: ''
          optional: true
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.listDeletedKeys'
    name: listDeletedKeys(ListDeletedKeysOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the deleted keys in the vault.  The full key identifier and
      properties are provided

      in the response. No values are returned for the keys. This operations
      requires the keys/list permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      for await (const deletedKey of client.listDeletedKeys()) {
        console.log("deleted key: ", deletedKey);
      }

      ```
    syntax:
      content: 'function listDeletedKeys(options?: ListDeletedKeysOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-keys.ListDeletedKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - PagedAsyncIterableIterator<@azure/keyvault-keys.DeletedKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.listPropertiesOfKeys'
    name: listPropertiesOfKeys(ListPropertiesOfKeysOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the latest version of all keys in the vault.  The full key
      identifier and properties are provided

      in the response. No values are returned for the keys. This operations
      requires the keys/list permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      for await (const keyProperties of client.listPropertiesOfKeys()) {
        const key = await client.getKey(keyProperties.name);
        console.log("key: ", key);
      }

      ```
    syntax:
      content: 'function listPropertiesOfKeys(options?: ListPropertiesOfKeysOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-keys.ListPropertiesOfKeysOptions'
          description: ''
          optional: true
      return:
        type:
          - PagedAsyncIterableIterator<@azure/keyvault-keys.KeyProperties>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.listPropertiesOfKeyVersions'
    name: 'listPropertiesOfKeyVersions(string, ListPropertiesOfKeyVersionsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates all versions of the given key in the vault. The full key
      identifier, properties, and tags are provided

      in the response. This operation requires the keys/list permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      for await (const keyProperties of
      client.listPropertiesOfKeyVersions("MyKey")) {
        const key = await client.getKey(keyProperties.name);
        console.log("key version: ", key);
      }

      ```
    syntax:
      content: >-
        function listPropertiesOfKeyVersions(name: string, options?:
        ListPropertiesOfKeyVersionsOptions)
      parameters:
        - id: name
          type:
            - string
          description: Name of the key to fetch versions for
        - id: options
          type:
            - '@azure/keyvault-keys.ListPropertiesOfKeyVersionsOptions'
          description: ''
          optional: true
      return:
        type:
          - PagedAsyncIterableIterator<@azure/keyvault-keys.KeyProperties>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.purgeDeletedKey'
    name: 'purgeDeletedKey(string, PurgeDeletedKeyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The purge deleted key operation removes the key permanently, without the
      possibility of

      recovery. This operation can only be enabled on a soft-delete enabled
      vault. This operation

      requires the keys/purge permission.

      Example usage:

      ```ts

      const client = new KeyClient(url, credentials);

      const deletePoller = await client.beginDeleteKey("MyKey")

      await deletePoller.pollUntilDone();

      await client.purgeDeletedKey("MyKey");

      ```
    syntax:
      content: 'function purgeDeletedKey(name: string, options?: PurgeDeletedKeyOptions)'
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.PurgeDeletedKeyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.restoreKeyBackup'
    name: 'restoreKeyBackup(Uint8Array, RestoreKeyBackupOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up key, and all its versions, to a vault. This operation
      requires the

      keys/restore permission.

      Example usage:

      ```ts

      let client = new KeyClient(url, credentials);

      let backupContents = await client.backupKey("MyKey");

      // ...

      let key = await client.restoreKeyBackup(backupContents);

      ```
    syntax:
      content: >-
        function restoreKeyBackup(backup: Uint8Array, options?:
        RestoreKeyBackupOptions)
      parameters:
        - id: backup
          type:
            - Uint8Array
          description: The backup blob associated with a key bundle.
        - id: options
          type:
            - '@azure/keyvault-keys.RestoreKeyBackupOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.KeyVaultKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.updateKeyProperties'
    name: 'updateKeyProperties(string, string, UpdateKeyPropertiesOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The updateKeyProperties method changes specified properties of an existing
      stored key. Properties that

      are not specified in the request are left unchanged. The value of a key
      itself cannot be

      changed. This operation requires the keys/set permission.

      Example usage:

      ```ts

      let keyName = "MyKey";

      let client = new KeyClient(url, credentials);

      let key = await client.getKey(keyName);

      let result = await client.updateKeyProperties(keyName,
      key.properties.version, { enabled: false });

      ```
    syntax:
      content: >-
        function updateKeyProperties(name: string, keyVersion: string, options?:
        UpdateKeyPropertiesOptions)
      parameters:
        - id: name
          type:
            - string
          description: The name of the key.
        - id: keyVersion
          type:
            - string
          description: The version of the key.
        - id: options
          type:
            - '@azure/keyvault-keys.UpdateKeyPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-keys.KeyVaultKey>
        description: ''
    package: '@azure/keyvault-keys'
  - uid: '@azure/keyvault-keys.KeyClient.vaultUrl'
    name: vaultUrl
    fullName: vaultUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The base URL to the vault
    syntax:
      content: 'vaultUrl: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/keyvault-keys'
references:
  - uid: '@azure/keyvault-keys.KeyClientOptions'
    name: KeyClientOptions
    spec.typeScript:
      - name: KeyClientOptions
        fullName: KeyClientOptions
        uid: '@azure/keyvault-keys.KeyClientOptions'
  - uid: '@azure/keyvault-keys.BackupKeyOptions'
    name: BackupKeyOptions
    spec.typeScript:
      - name: BackupKeyOptions
        fullName: BackupKeyOptions
        uid: '@azure/keyvault-keys.BackupKeyOptions'
  - uid: '@azure/keyvault-keys.BeginDeleteKeyOptions'
    name: BeginDeleteKeyOptions
    spec.typeScript:
      - name: BeginDeleteKeyOptions
        fullName: BeginDeleteKeyOptions
        uid: '@azure/keyvault-keys.BeginDeleteKeyOptions'
  - uid: >-
      Promise<PollerLike<PollOperationState<@azure/keyvault-keys.DeletedKey>,
      @azure/keyvault-keys.DeletedKey>>
    name: DeletedKey>>
    spec.typeScript:
      - name: Promise<PollerLike<PollOperationState<
        fullName: Promise<PollerLike<PollOperationState<
      - name: DeletedKey
        fullName: DeletedKey
        uid: '@azure/keyvault-keys.DeletedKey'
      - name: '>, '
        fullName: '>, '
      - name: DeletedKey
        fullName: DeletedKey
        uid: '@azure/keyvault-keys.DeletedKey'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/keyvault-keys.BeginRecoverDeletedKeyOptions'
    name: BeginRecoverDeletedKeyOptions
    spec.typeScript:
      - name: BeginRecoverDeletedKeyOptions
        fullName: BeginRecoverDeletedKeyOptions
        uid: '@azure/keyvault-keys.BeginRecoverDeletedKeyOptions'
  - uid: '@azure/keyvault-keys.CreateEcKeyOptions'
    name: CreateEcKeyOptions
    spec.typeScript:
      - name: CreateEcKeyOptions
        fullName: CreateEcKeyOptions
        uid: '@azure/keyvault-keys.CreateEcKeyOptions'
  - uid: Promise<@azure/keyvault-keys.KeyVaultKey>
    name: KeyVaultKey>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: KeyVaultKey
        fullName: KeyVaultKey
        uid: '@azure/keyvault-keys.KeyVaultKey'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.KeyType'
    name: KeyType
    spec.typeScript:
      - name: KeyType
        fullName: KeyType
        uid: '@azure/keyvault-keys.KeyType'
  - uid: '@azure/keyvault-keys.CreateKeyOptions'
    name: CreateKeyOptions
    spec.typeScript:
      - name: CreateKeyOptions
        fullName: CreateKeyOptions
        uid: '@azure/keyvault-keys.CreateKeyOptions'
  - uid: '@azure/keyvault-keys.CreateRsaKeyOptions'
    name: CreateRsaKeyOptions
    spec.typeScript:
      - name: CreateRsaKeyOptions
        fullName: CreateRsaKeyOptions
        uid: '@azure/keyvault-keys.CreateRsaKeyOptions'
  - uid: '@azure/keyvault-keys.GetDeletedKeyOptions'
    name: GetDeletedKeyOptions
    spec.typeScript:
      - name: GetDeletedKeyOptions
        fullName: GetDeletedKeyOptions
        uid: '@azure/keyvault-keys.GetDeletedKeyOptions'
  - uid: Promise<@azure/keyvault-keys.DeletedKey>
    name: DeletedKey>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedKey
        fullName: DeletedKey
        uid: '@azure/keyvault-keys.DeletedKey'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.GetKeyOptions'
    name: GetKeyOptions
    spec.typeScript:
      - name: GetKeyOptions
        fullName: GetKeyOptions
        uid: '@azure/keyvault-keys.GetKeyOptions'
  - uid: '@azure/keyvault-keys.JsonWebKey'
    name: JsonWebKey
    spec.typeScript:
      - name: JsonWebKey
        fullName: JsonWebKey
        uid: '@azure/keyvault-keys.JsonWebKey'
  - uid: '@azure/keyvault-keys.ImportKeyOptions'
    name: ImportKeyOptions
    spec.typeScript:
      - name: ImportKeyOptions
        fullName: ImportKeyOptions
        uid: '@azure/keyvault-keys.ImportKeyOptions'
  - uid: '@azure/keyvault-keys.ListDeletedKeysOptions'
    name: ListDeletedKeysOptions
    spec.typeScript:
      - name: ListDeletedKeysOptions
        fullName: ListDeletedKeysOptions
        uid: '@azure/keyvault-keys.ListDeletedKeysOptions'
  - uid: PagedAsyncIterableIterator<@azure/keyvault-keys.DeletedKey>
    name: DeletedKey>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: DeletedKey
        fullName: DeletedKey
        uid: '@azure/keyvault-keys.DeletedKey'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.ListPropertiesOfKeyVersionsOptions'
    name: ListPropertiesOfKeyVersionsOptions
    spec.typeScript:
      - name: ListPropertiesOfKeyVersionsOptions
        fullName: ListPropertiesOfKeyVersionsOptions
        uid: '@azure/keyvault-keys.ListPropertiesOfKeyVersionsOptions'
  - uid: PagedAsyncIterableIterator<@azure/keyvault-keys.KeyProperties>
    name: KeyProperties>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: KeyProperties
        fullName: KeyProperties
        uid: '@azure/keyvault-keys.KeyProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-keys.ListPropertiesOfKeysOptions'
    name: ListPropertiesOfKeysOptions
    spec.typeScript:
      - name: ListPropertiesOfKeysOptions
        fullName: ListPropertiesOfKeysOptions
        uid: '@azure/keyvault-keys.ListPropertiesOfKeysOptions'
  - uid: '@azure/keyvault-keys.PurgeDeletedKeyOptions'
    name: PurgeDeletedKeyOptions
    spec.typeScript:
      - name: PurgeDeletedKeyOptions
        fullName: PurgeDeletedKeyOptions
        uid: '@azure/keyvault-keys.PurgeDeletedKeyOptions'
  - uid: '@azure/keyvault-keys.RestoreKeyBackupOptions'
    name: RestoreKeyBackupOptions
    spec.typeScript:
      - name: RestoreKeyBackupOptions
        fullName: RestoreKeyBackupOptions
        uid: '@azure/keyvault-keys.RestoreKeyBackupOptions'
  - uid: '@azure/keyvault-keys.UpdateKeyPropertiesOptions'
    name: UpdateKeyPropertiesOptions
    spec.typeScript:
      - name: UpdateKeyPropertiesOptions
        fullName: UpdateKeyPropertiesOptions
        uid: '@azure/keyvault-keys.UpdateKeyPropertiesOptions'
