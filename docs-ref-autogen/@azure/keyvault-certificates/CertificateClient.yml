### YamlMime:UniversalReference
items:
  - uid: '@azure/keyvault-certificates.CertificateClient'
    name: CertificateClient
    fullName: CertificateClient
    children:
      - '@azure/keyvault-certificates.CertificateClient.backupCertificate'
      - '@azure/keyvault-certificates.CertificateClient.beginCreateCertificate'
      - '@azure/keyvault-certificates.CertificateClient.beginDeleteCertificate'
      - >-
        @azure/keyvault-certificates.CertificateClient.beginRecoverDeletedCertificate
      - '@azure/keyvault-certificates.CertificateClient.constructor'
      - '@azure/keyvault-certificates.CertificateClient.createIssuer'
      - >-
        @azure/keyvault-certificates.CertificateClient.deleteCertificateOperation
      - '@azure/keyvault-certificates.CertificateClient.deleteContacts'
      - '@azure/keyvault-certificates.CertificateClient.deleteIssuer'
      - '@azure/keyvault-certificates.CertificateClient.getCertificate'
      - '@azure/keyvault-certificates.CertificateClient.getCertificateOperation'
      - '@azure/keyvault-certificates.CertificateClient.getCertificatePolicy'
      - '@azure/keyvault-certificates.CertificateClient.getCertificateVersion'
      - '@azure/keyvault-certificates.CertificateClient.getContacts'
      - '@azure/keyvault-certificates.CertificateClient.getDeletedCertificate'
      - '@azure/keyvault-certificates.CertificateClient.getIssuer'
      - '@azure/keyvault-certificates.CertificateClient.importCertificate'
      - '@azure/keyvault-certificates.CertificateClient.listDeletedCertificates'
      - >-
        @azure/keyvault-certificates.CertificateClient.listPropertiesOfCertificates
      - >-
        @azure/keyvault-certificates.CertificateClient.listPropertiesOfCertificateVersions
      - '@azure/keyvault-certificates.CertificateClient.listPropertiesOfIssuers'
      - '@azure/keyvault-certificates.CertificateClient.mergeCertificate'
      - '@azure/keyvault-certificates.CertificateClient.purgeDeletedCertificate'
      - '@azure/keyvault-certificates.CertificateClient.restoreCertificateBackup'
      - '@azure/keyvault-certificates.CertificateClient.setContacts'
      - '@azure/keyvault-certificates.CertificateClient.updateCertificatePolicy'
      - >-
        @azure/keyvault-certificates.CertificateClient.updateCertificateProperties
      - '@azure/keyvault-certificates.CertificateClient.updateIssuer'
      - '@azure/keyvault-certificates.CertificateClient.vaultUrl'
    langs:
      - typeScript
    type: class
    summary: The client to interact with the KeyVault certificates functionality
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.backupCertificate'
    name: 'backupCertificate(string, BackupCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests that a backup of the specified certificate be downloaded to the
      client. All versions of the certificate will be downloaded.

      This operation requires the certificates/backup permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      const backup = await client.backupCertificate("MyCertificate");

      ```
    syntax:
      content: >-
        function backupCertificate(certificateName: string, options?:
        BackupCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.BackupCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Uint8Array | undefined>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.beginCreateCertificate'
    name: >-
      beginCreateCertificate(string, CertificatePolicy,
      BeginCreateCertificateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new certificate. If this is the first version, the certificate
      resource is created.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the certificate is fully recovered.

      **Note:** Sending `Self` as the `issuerName` of the certificate's policy
      will create a self-signed certificate.


      This operation requires the certificates/create permission.


      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const certificatePolicy = {
        issuerName: "Self",
        subject: "cn=MyCert"
      };

      const createPoller = await client.beginCreateCertificate("MyCertificate",
      certificatePolicy);


      // The pending certificate can be obtained by calling the following
      method:

      const pendingCertificate = createPoller.getResult();


      // Serializing the poller

      const serialized = createPoller.toString();


      // A new poller can be created with:

      // const newPoller = await client.beginCreateCertificate("MyCertificate",
      certificatePolicy, { resumeFrom: serialized });


      // Waiting until it's done

      const certificate = await createPoller.pollUntilDone();

      console.log(certificate);

      ```
    syntax:
      content: >-
        function beginCreateCertificate(certificateName: string, policy:
        CertificatePolicy, options?: BeginCreateCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: policy
          type:
            - '@azure/keyvault-certificates.CertificatePolicy'
          description: ''
        - id: options
          type:
            - '@azure/keyvault-certificates.BeginCreateCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<@azure/keyvault-certificates.CreateCertificateState,
            @azure/keyvault-certificates.KeyVaultCertificateWithPolicy>>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.beginDeleteCertificate'
    name: 'beginDeleteCertificate(string, BeginDeleteCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The DELETE operation applies to any certificate stored in Azure Key Vault.
      DELETE cannot be applied

      to an individual version of a certificate.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the certificate is fully recovered.

      This operation requires the certificates/delete permission.


      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const createPoller = await client.beginCreateCertificate("MyCertificate",
      {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      await createPoller.pollUntilDone();


      const deletePoller = await client.beginDeleteCertificate("MyCertificate");


      // Serializing the poller

      const serialized = deletePoller.toString();


      // A new poller can be created with:

      // const newPoller = await client.beginDeleteCertificate("MyCertificate",
      { resumeFrom: serialized });


      // Waiting until it's done

      const deletedCertificate = await deletePoller.pollUntilDone();

      console.log(deletedCertificate);

      ```
    syntax:
      content: >-
        function beginDeleteCertificate(certificateName: string, options?:
        BeginDeleteCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - '@azure/keyvault-certificates.BeginDeleteCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<@azure/keyvault-certificates.DeleteCertificateState,
            @azure/keyvault-certificates.DeletedCertificate>>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: >-
      @azure/keyvault-certificates.CertificateClient.beginRecoverDeletedCertificate
    name: >-
      beginRecoverDeletedCertificate(string,
      BeginRecoverDeletedCertificateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recovers the deleted certificate in the specified vault. This operation
      can only be performed on a soft-delete enabled vault. This operation

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the certificate is fully recovered.

      This operation requires the certificates/recover permission.


      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);


      const deletePoller = await client.beginDeleteCertificate("MyCertificate");

      await deletePoller.pollUntilDone();


      const recoverPoller = await
      client.beginRecoverDeletedCertificate("MyCertificate");


      // Serializing the poller

      const serialized = deletePoller.toString();


      // A new poller can be created with:

      // const newPoller = await
      client.beginRecoverDeletedCertificate("MyCertificate", { resumeFrom:
      serialized });


      // Waiting until it's done

      const certificate = await recoverPoller.pollUntilDone();

      console.log(certificate);

      ```
    syntax:
      content: >-
        function beginRecoverDeletedCertificate(certificateName: string,
        options?: BeginRecoverDeletedCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the deleted certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.BeginRecoverDeletedCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<@azure/keyvault-certificates.RecoverDeletedCertificateState,
            @azure/keyvault-certificates.KeyVaultCertificateWithPolicy>>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.constructor'
    name: 'CertificateClient(string, TokenCredential, CertificateClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of CertificateClient.
    syntax:
      content: >-
        new CertificateClient(vaultUrl: string, credential: TokenCredential,
        pipelineOptions?: CertificateClientOptions)
      parameters:
        - id: vaultUrl
          type:
            - string
          description: the base URL to the vault.
        - id: credential
          type:
            - TokenCredential
          description: >-
            An object that implements the `TokenCredential` interface used to
            authenticate requests to the service. Use the @azure/identity
            package to create a credential that suits your needs.
        - id: pipelineOptions
          type:
            - '@azure/keyvault-certificates.CertificateClientOptions'
          description: ''
          optional: true
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.createIssuer'
    name: 'createIssuer(string, string, CreateIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The createIssuer operation adds or updates the specified certificate
      issuer. This

      operation requires the certificates/setissuers permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createIssuer("IssuerName", "Test");

      ```
    syntax:
      content: >-
        function createIssuer(issuerName: string, provider: string, options?:
        CreateIssuerOptions)
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: provider
          type:
            - string
          description: The issuer provider.
        - id: options
          type:
            - '@azure/keyvault-certificates.CreateIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.deleteCertificateOperation'
    name: 'deleteCertificateOperation(string, DeleteCertificateOperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes the creation operation for a specified certificate that is in the
      process of being created.

      The certificate is no longer created. This operation requires the
      certificates/update permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      await client.deleteCertificateOperation("MyCertificate");

      await client.getCertificateOperation("MyCertificate"); // Throws error:
      Pending certificate not found: "MyCertificate"

      ```
    syntax:
      content: >-
        function deleteCertificateOperation(certificateName: string, options?:
        DeleteCertificateOperationOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.DeleteCertificateOperationOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateOperation>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.deleteContacts'
    name: deleteContacts(DeleteContactsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Deletes all of the certificate contacts. This operation requires the
      certificates/managecontacts permission.

      Example usage:

      ```ts

      let client = new CertificateClient(url, credentials);

      await client.setContacts([{
        email: "b@b.com",
        name: "b",
        phone: "222222222222"
      }]);

      await client.deleteContacts();

      ```
    syntax:
      content: 'function deleteContacts(options?: DeleteContactsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.DeleteContactsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/keyvault-certificates.CertificateContact[] |
            undefined>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.deleteIssuer'
    name: 'deleteIssuer(string, DeleteIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The deleteIssuer operation permanently removes the specified certificate
      issuer from

      the vault. This operation requires the
      certificates/manageissuers/deleteissuers permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createIssuer("IssuerName", "Provider");

      await client.deleteIssuer("IssuerName");

      ```
    syntax:
      content: 'function deleteIssuer(issuerName: string, options?: DeleteIssuerOptions)'
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - '@azure/keyvault-certificates.DeleteIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificate'
    name: 'getCertificate(string, GetCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the latest information available from a specific certificate,
      including the certificate's policy. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const poller = await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      await poller.pollUntilDone();

      const certificate = await client.getCertificate("MyCertificate");

      console.log(certificate);

      ```
    syntax:
      content: >-
        function getCertificate(certificateName: string, options?:
        GetCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificateWithPolicy>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificateOperation'
    name: 'getCertificateOperation(string, GetCertificateOperationOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the creation operation associated with a specified certificate. This
      operation requires the certificates/get permission.

      This function returns a Long Running Operation poller that allows you to
      wait indefinitely until the certificate is fully recovered.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const createPoller = await client.beginCreateCertificate("MyCertificate",
      {
        issuerName: "Self",
        subject: "cn=MyCert"
      });


      const poller = await client.getCertificateOperation("MyCertificate");

      const pendingCertificate = poller.getResult();


      const certificateOperation =
      poller.getOperationState().certificateOperation;

      console.log(certificateOperation);

      ```
    syntax:
      content: >-
        function getCertificateOperation(certificateName: string, options?:
        GetCertificateOperationOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificateOperationOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<PollerLike<@azure/keyvault-certificates.CertificateOperationState,
            @azure/keyvault-certificates.KeyVaultCertificateWithPolicy>>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificatePolicy'
    name: 'getCertificatePolicy(string, GetCertificatePolicyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getCertificatePolicy operation returns the specified certificate
      policy resources in the specified key vault. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      const policy = await client.getCertificatePolicy("MyCertificate");

      console.log(policy);

      ```
    syntax:
      content: >-
        function getCertificatePolicy(certificateName: string, options?:
        GetCertificatePolicyOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificatePolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificatePolicy>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getCertificateVersion'
    name: 'getCertificateVersion(string, string, GetCertificateVersionOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets information about a specific certificate on a specific version. It
      won't return the certificate's policy. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const poller = await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      await poller.pollUntilDone();

      const certificateWithPolicy = await
      client.getCertificate("MyCertificate");

      const certificate = await client.getCertificateVersion("MyCertificate",
      certificateWithPolicy.properties.version!);

      console.log(certificate);

      ```
    syntax:
      content: >-
        function getCertificateVersion(certificateName: string, version: string,
        options?: GetCertificateVersionOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: version
          type:
            - string
          description: The specific version of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetCertificateVersionOptions'
          description: |
            The optional parameters
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getContacts'
    name: getContacts(GetContactsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the set of certificate contact resources in the specified key
      vault. This operation requires the certificates/managecontacts permission.

      Example usage:

      ```ts

      let client = new CertificateClient(url, credentials);

      await client.setContacts([{
        email: "b@b.com",
        name: "b",
        phone: "222222222222"
      }]);

      const contacts = await client.getContacts();

      console.log(contacts);

      ```
    syntax:
      content: 'function getContacts(options?: GetContactsOptions)'
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.GetContactsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/keyvault-certificates.CertificateContact[] |
            undefined>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getDeletedCertificate'
    name: 'getDeletedCertificate(string, GetDeletedCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      retrieves the deleted certificate information plus its attributes, such as
      retention interval, scheduled permanent deletion and the

      current deletion recovery level. This operation requires the
      certificates/get permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const deletedCertificate = await
      client.getDeletedCertificate("MyDeletedCertificate");

      console.log("Deleted certificate:", deletedCertificate);

      ```
    syntax:
      content: >-
        function getDeletedCertificate(certificateName: string, options?:
        GetDeletedCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: options
          type:
            - '@azure/keyvault-certificates.GetDeletedCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.DeletedCertificate>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.getIssuer'
    name: 'getIssuer(string, GetIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The getIssuer operation returns the specified certificate issuer resources
      in the

      specified key vault. This operation requires the
      certificates/manageissuers/getissuers

      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createIssuer("IssuerName", "Test");

      const certificateIssuer = await client.getIssuer("IssuerName");

      console.log(certificateIssuer);

      ```
    syntax:
      content: 'function getIssuer(issuerName: string, options?: GetIssuerOptions)'
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - '@azure/keyvault-certificates.GetIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.importCertificate'
    name: 'importCertificate(string, Uint8Array, ImportCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Imports an existing valid certificate, containing a private key, into
      Azure Key Vault. The certificate to be imported can be in either PFX or
      PEM format.

      If the certificate is in PEM format the PEM file must contain the key as
      well as x509 certificates. This operation requires the certificates/import
      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      // See: @azure/keyvault-secrets

      const certificateSecret = await secretClient.getSecret("MyCertificate");

      const base64EncodedCertificate = certificateSecret.value!;

      let buffer: Uint8Array;


      if (isNode) {
        buffer = Buffer.from(base64EncodedCertificate, "base64");
      } else {
        buffer = Uint8Array.from(atob(base64EncodedCertificate), (c) => c.charCodeAt(0));
      }


      await client.importCertificate("MyCertificate", buffer);

      ```
    syntax:
      content: >-
        function importCertificate(certificateName: string, certificateBytes:
        Uint8Array, options?: ImportCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: certificateBytes
          type:
            - Uint8Array
          description: >-
            The PFX or ASCII PEM formatted value of the certificate containing
            both the X.509 certificates and the private key
        - id: options
          type:
            - '@azure/keyvault-certificates.ImportCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificateWithPolicy>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.listDeletedCertificates'
    name: listDeletedCertificates(ListDeletedCertificatesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieves the certificates in the current vault which are in a deleted
      state and ready for recovery or purging. This operation includes
      deletion-specific

      information. This operation requires the certificates/get/list permission.
      This operation can only be enabled on soft-delete enabled vaults.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      for await (const deletedCertificate of client.listDeletedCertificates()) {
        console.log(deletedCertificate);
      }

      for await (const page of client.listDeletedCertificates().byPage()) {
        for (const deletedCertificate of page) {
          console.log(deletedCertificate);
        }
      }

      ```
    syntax:
      content: >-
        function listDeletedCertificates(options?:
        ListDeletedCertificatesOptions)
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.ListDeletedCertificatesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.DeletedCertificate>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: >-
      @azure/keyvault-certificates.CertificateClient.listPropertiesOfCertificates
    name: listPropertiesOfCertificates(ListPropertiesOfCertificatesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Iterates the latest version of all certificates in the vault.  The full
      certificate identifier and attributes are provided

      in the response. No values are returned for the certificates. This
      operations requires the certificates/list permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      // All in one call

      for await (const certificateProperties of
      client.listPropertiesOfCertificates()) {
        console.log(certificateProperties);
      }

      // By pages

      for await (const page of client.listPropertiesOfCertificates().byPage()) {
        for (const certificateProperties of page) {
          console.log(certificateProperties);
        }
      }

      ```
    syntax:
      content: >-
        function listPropertiesOfCertificates(options?:
        ListPropertiesOfCertificatesOptions)
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.ListPropertiesOfCertificatesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.CertificateProperties>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: >-
      @azure/keyvault-certificates.CertificateClient.listPropertiesOfCertificateVersions
    name: >-
      listPropertiesOfCertificateVersions(string,
      ListPropertiesOfCertificateVersionsOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the versions of a certificate in the specified key

      vault. This operation requires the certificates/list permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      for await (const certificateProperties of
      client.listPropertiesOfCertificateVersions("MyCertificate")) {
        console.log(certificateProperties.version!);
      }

      ```
    syntax:
      content: >-
        function listPropertiesOfCertificateVersions(certificateName: string,
        options?: ListPropertiesOfCertificateVersionsOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate.
        - id: options
          type:
            - >-
              @azure/keyvault-certificates.ListPropertiesOfCertificateVersionsOptions
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.CertificateProperties>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.listPropertiesOfIssuers'
    name: listPropertiesOfIssuers(ListPropertiesOfIssuersOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the set of certificate issuer resources in the specified key
      vault. This operation requires the certificates/manageissuers/getissuers
      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createIssuer("IssuerName", "Test");

      // All in one call

      for await (const issuerProperties of client.listPropertiesOfIssuers()) {
        console.log(issuerProperties);
      }

      // By pages

      for await (const page of client.listPropertiesOfIssuers().byPage()) {
        for (const issuerProperties of page) {
          console.log(issuerProperties);
        }
      }

      ```
    syntax:
      content: >-
        function listPropertiesOfIssuers(options?:
        ListPropertiesOfIssuersOptions)
      parameters:
        - id: options
          type:
            - '@azure/keyvault-certificates.ListPropertiesOfIssuersOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<@azure/keyvault-certificates.IssuerProperties>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.mergeCertificate'
    name: 'mergeCertificate(string, Uint8Array[], MergeCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Performs the merging of a certificate or certificate chain with a key pair
      currently available in the service. This operation requires the
      certificates/create permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Unknown",
        subject: "cn=MyCert"
      });

      const poller = await client.getCertificateOperation("MyCertificate");

      const { csr } = poller.getOperationState().certificateOperation!;

      const base64Csr = Buffer.from(csr!).toString("base64");

      const wrappedCsr = ["-----BEGIN CERTIFICATE REQUEST-----", base64Csr,
      "-----END CERTIFICATE REQUEST-----"].join("\n");


      const fs = require("fs");

      fs.writeFileSync("test.csr", wrappedCsr);


      // Certificate available locally made using:

      //   openssl genrsa -out ca.key 2048

      //   openssl req -new -x509 -key ca.key -out ca.crt

      // You can read more about how to create a fake certificate authority
      here: https://gist.github.com/Soarez/9688998


      const childProcess = require("child_process");

      childProcess.execSync("openssl x509 -req -in test.csr -CA ca.crt -CAkey
      ca.key -CAcreateserial -out test.crt");

      const base64Crt =
      fs.readFileSync("test.crt").toString().split("\n").slice(1, -1).join("");


      await client.mergeCertificate("MyCertificate", [Buffer.from(base64Crt)]);

      ```
    syntax:
      content: >-
        function mergeCertificate(certificateName: string, x509Certificates:
        Uint8Array[], options?: MergeCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: x509Certificates
          type:
            - 'Uint8Array[]'
          description: The certificate(s) to merge
        - id: options
          type:
            - '@azure/keyvault-certificates.MergeCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificateWithPolicy>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.purgeDeletedCertificate'
    name: 'purgeDeletedCertificate(string, PurgeDeletedCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Performs an irreversible deletion of the specified certificate, without
      possibility for recovery. The operation is not available if the

      recovery level does not specify 'Purgeable'. This operation requires the
      certificate/purge permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      const deletePoller = await client.beginDeleteCertificate("MyCertificate");

      await deletePoller.pollUntilDone();

      // Deleting a certificate takes time, make sure to wait before purging it

      client.purgeDeletedCertificate("MyCertificate");

      ```
    syntax:
      content: >-
        function purgeDeletedCertificate(certificateName: string, options?:
        PurgeDeletedCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the deleted certificate to purge
        - id: options
          type:
            - '@azure/keyvault-certificates.PurgeDeletedCertificateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<null>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.restoreCertificateBackup'
    name: 'restoreCertificateBackup(Uint8Array, RestoreCertificateBackupOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Restores a backed up certificate, and all its versions, to a vault. This
      operation requires the certificates/restore permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      const backup = await client.backupCertificate("MyCertificate");

      const poller = await client.beginDeleteCertificate("MyCertificate");

      await poller.pollUntilDone();

      // Some time is required before we're able to restore the certificate

      await client.restoreCertificateBackup(backup!);

      ```
    syntax:
      content: >-
        function restoreCertificateBackup(backup: Uint8Array, options?:
        RestoreCertificateBackupOptions)
      parameters:
        - id: backup
          type:
            - Uint8Array
          description: The back-up certificate to restore from
        - id: options
          type:
            - '@azure/keyvault-certificates.RestoreCertificateBackupOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificateWithPolicy>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.setContacts'
    name: 'setContacts(CertificateContact[], SetContactsOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets the certificate contacts for the key vault. This operation requires
      the certificates/managecontacts permission.

      Example usage:

      ```ts

      let client = new CertificateClient(url, credentials);

      await client.setContacts([{
        email: "b@b.com",
        name: "b",
        phone: "222222222222"
      }]);

      ```
    syntax:
      content: >-
        function setContacts(contacts: CertificateContact[], options?:
        SetContactsOptions)
      parameters:
        - id: contacts
          type:
            - '@azure/keyvault-certificates.CertificateContact[]'
          description: The contacts to use
        - id: options
          type:
            - '@azure/keyvault-certificates.SetContactsOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<@azure/keyvault-certificates.CertificateContact[] |
            undefined>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.updateCertificatePolicy'
    name: >-
      updateCertificatePolicy(string, CertificatePolicy,
      UpdateCertificatePolicyOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates the certificate policy for the specified certificate. This
      operation requires the certificates/update permission.
    syntax:
      content: >-
        function updateCertificatePolicy(certificateName: string, policy:
        CertificatePolicy, options?: UpdateCertificatePolicyOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: policy
          type:
            - '@azure/keyvault-certificates.CertificatePolicy'
          description: The certificate policy
        - id: options
          type:
            - '@azure/keyvault-certificates.UpdateCertificatePolicyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificatePolicy>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.updateCertificateProperties'
    name: 'updateCertificateProperties(string, string, UpdateCertificateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Applies the specified update on the given certificate; the only elements
      updated are the

      certificate's attributes. This operation requires the certificates/update
      permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.beginCreateCertificate("MyCertificate", {
        issuerName: "Self",
        subject: "cn=MyCert"
      });

      await client.updateCertificateProperties("MyCertificate", "", {
        tags: {
          customTag: "value"
        }
      });

      ```
    syntax:
      content: >-
        function updateCertificateProperties(certificateName: string, version:
        string, options?: UpdateCertificateOptions)
      parameters:
        - id: certificateName
          type:
            - string
          description: The name of the certificate
        - id: version
          type:
            - string
          description: The version of the certificate to update
        - id: options
          type:
            - '@azure/keyvault-certificates.UpdateCertificateOptions'
          description: |
            The options, including what to update
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.KeyVaultCertificate>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.updateIssuer'
    name: 'updateIssuer(string, UpdateIssuerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The updateIssuer operation performs an update on the specified certificate
      issuer

      entity. This operation requires the certificates/setissuers permission.

      Example usage:

      ```ts

      const client = new CertificateClient(url, credentials);

      await client.createIssuer("IssuerName", "Test");

      await client.updateIssuer("IssuerName", {
        provider: "Provider2"
      });

      ```
    syntax:
      content: 'function updateIssuer(issuerName: string, options?: UpdateIssuerOptions)'
      parameters:
        - id: issuerName
          type:
            - string
          description: The name of the issuer.
        - id: options
          type:
            - '@azure/keyvault-certificates.UpdateIssuerOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/keyvault-certificates.CertificateIssuer>
        description: ''
    package: '@azure/keyvault-certificates'
  - uid: '@azure/keyvault-certificates.CertificateClient.vaultUrl'
    name: vaultUrl
    fullName: vaultUrl
    children: []
    langs:
      - typeScript
    type: property
    summary: The base URL to the vault
    syntax:
      content: 'vaultUrl: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/keyvault-certificates'
references:
  - uid: '@azure/keyvault-certificates.CertificateClientOptions'
    name: CertificateClientOptions
    spec.typeScript:
      - name: CertificateClientOptions
        fullName: CertificateClientOptions
        uid: '@azure/keyvault-certificates.CertificateClientOptions'
  - uid: '@azure/keyvault-certificates.BackupCertificateOptions'
    name: BackupCertificateOptions
    spec.typeScript:
      - name: BackupCertificateOptions
        fullName: BackupCertificateOptions
        uid: '@azure/keyvault-certificates.BackupCertificateOptions'
  - uid: '@azure/keyvault-certificates.CertificatePolicy'
    name: CertificatePolicy
    spec.typeScript:
      - name: CertificatePolicy
        fullName: CertificatePolicy
        uid: '@azure/keyvault-certificates.CertificatePolicy'
  - uid: '@azure/keyvault-certificates.BeginCreateCertificateOptions'
    name: BeginCreateCertificateOptions
    spec.typeScript:
      - name: BeginCreateCertificateOptions
        fullName: BeginCreateCertificateOptions
        uid: '@azure/keyvault-certificates.BeginCreateCertificateOptions'
  - uid: >-
      Promise<PollerLike<@azure/keyvault-certificates.CreateCertificateState,
      @azure/keyvault-certificates.KeyVaultCertificateWithPolicy>>
    name: KeyVaultCertificateWithPolicy>>
    spec.typeScript:
      - name: Promise<PollerLike<
        fullName: Promise<PollerLike<
      - name: CreateCertificateState
        fullName: CreateCertificateState
        uid: '@azure/keyvault-certificates.CreateCertificateState'
      - name: ', '
        fullName: ', '
      - name: KeyVaultCertificateWithPolicy
        fullName: KeyVaultCertificateWithPolicy
        uid: '@azure/keyvault-certificates.KeyVaultCertificateWithPolicy'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/keyvault-certificates.BeginDeleteCertificateOptions'
    name: BeginDeleteCertificateOptions
    spec.typeScript:
      - name: BeginDeleteCertificateOptions
        fullName: BeginDeleteCertificateOptions
        uid: '@azure/keyvault-certificates.BeginDeleteCertificateOptions'
  - uid: >-
      Promise<PollerLike<@azure/keyvault-certificates.DeleteCertificateState,
      @azure/keyvault-certificates.DeletedCertificate>>
    name: DeletedCertificate>>
    spec.typeScript:
      - name: Promise<PollerLike<
        fullName: Promise<PollerLike<
      - name: DeleteCertificateState
        fullName: DeleteCertificateState
        uid: '@azure/keyvault-certificates.DeleteCertificateState'
      - name: ', '
        fullName: ', '
      - name: DeletedCertificate
        fullName: DeletedCertificate
        uid: '@azure/keyvault-certificates.DeletedCertificate'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/keyvault-certificates.BeginRecoverDeletedCertificateOptions'
    name: BeginRecoverDeletedCertificateOptions
    spec.typeScript:
      - name: BeginRecoverDeletedCertificateOptions
        fullName: BeginRecoverDeletedCertificateOptions
        uid: '@azure/keyvault-certificates.BeginRecoverDeletedCertificateOptions'
  - uid: >-
      Promise<PollerLike<@azure/keyvault-certificates.RecoverDeletedCertificateState,
      @azure/keyvault-certificates.KeyVaultCertificateWithPolicy>>
    name: KeyVaultCertificateWithPolicy>>
    spec.typeScript:
      - name: Promise<PollerLike<
        fullName: Promise<PollerLike<
      - name: RecoverDeletedCertificateState
        fullName: RecoverDeletedCertificateState
        uid: '@azure/keyvault-certificates.RecoverDeletedCertificateState'
      - name: ', '
        fullName: ', '
      - name: KeyVaultCertificateWithPolicy
        fullName: KeyVaultCertificateWithPolicy
        uid: '@azure/keyvault-certificates.KeyVaultCertificateWithPolicy'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/keyvault-certificates.CreateIssuerOptions'
    name: CreateIssuerOptions
    spec.typeScript:
      - name: CreateIssuerOptions
        fullName: CreateIssuerOptions
        uid: '@azure/keyvault-certificates.CreateIssuerOptions'
  - uid: Promise<@azure/keyvault-certificates.CertificateIssuer>
    name: CertificateIssuer>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificateIssuer
        fullName: CertificateIssuer
        uid: '@azure/keyvault-certificates.CertificateIssuer'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.DeleteCertificateOperationOptions'
    name: DeleteCertificateOperationOptions
    spec.typeScript:
      - name: DeleteCertificateOperationOptions
        fullName: DeleteCertificateOperationOptions
        uid: '@azure/keyvault-certificates.DeleteCertificateOperationOptions'
  - uid: Promise<@azure/keyvault-certificates.CertificateOperation>
    name: CertificateOperation>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificateOperation
        fullName: CertificateOperation
        uid: '@azure/keyvault-certificates.CertificateOperation'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.DeleteContactsOptions'
    name: DeleteContactsOptions
    spec.typeScript:
      - name: DeleteContactsOptions
        fullName: DeleteContactsOptions
        uid: '@azure/keyvault-certificates.DeleteContactsOptions'
  - uid: 'Promise<@azure/keyvault-certificates.CertificateContact[] | undefined>'
    name: 'CertificateContact[] | undefined>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificateContact
        fullName: CertificateContact
        uid: '@azure/keyvault-certificates.CertificateContact'
      - name: '[] | undefined>'
        fullName: '[] | undefined>'
  - uid: '@azure/keyvault-certificates.DeleteIssuerOptions'
    name: DeleteIssuerOptions
    spec.typeScript:
      - name: DeleteIssuerOptions
        fullName: DeleteIssuerOptions
        uid: '@azure/keyvault-certificates.DeleteIssuerOptions'
  - uid: '@azure/keyvault-certificates.GetCertificateOptions'
    name: GetCertificateOptions
    spec.typeScript:
      - name: GetCertificateOptions
        fullName: GetCertificateOptions
        uid: '@azure/keyvault-certificates.GetCertificateOptions'
  - uid: Promise<@azure/keyvault-certificates.KeyVaultCertificateWithPolicy>
    name: KeyVaultCertificateWithPolicy>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: KeyVaultCertificateWithPolicy
        fullName: KeyVaultCertificateWithPolicy
        uid: '@azure/keyvault-certificates.KeyVaultCertificateWithPolicy'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.GetCertificateOperationOptions'
    name: GetCertificateOperationOptions
    spec.typeScript:
      - name: GetCertificateOperationOptions
        fullName: GetCertificateOperationOptions
        uid: '@azure/keyvault-certificates.GetCertificateOperationOptions'
  - uid: >-
      Promise<PollerLike<@azure/keyvault-certificates.CertificateOperationState,
      @azure/keyvault-certificates.KeyVaultCertificateWithPolicy>>
    name: KeyVaultCertificateWithPolicy>>
    spec.typeScript:
      - name: Promise<PollerLike<
        fullName: Promise<PollerLike<
      - name: CertificateOperationState
        fullName: CertificateOperationState
        uid: '@azure/keyvault-certificates.CertificateOperationState'
      - name: ', '
        fullName: ', '
      - name: KeyVaultCertificateWithPolicy
        fullName: KeyVaultCertificateWithPolicy
        uid: '@azure/keyvault-certificates.KeyVaultCertificateWithPolicy'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/keyvault-certificates.GetCertificatePolicyOptions'
    name: GetCertificatePolicyOptions
    spec.typeScript:
      - name: GetCertificatePolicyOptions
        fullName: GetCertificatePolicyOptions
        uid: '@azure/keyvault-certificates.GetCertificatePolicyOptions'
  - uid: Promise<@azure/keyvault-certificates.CertificatePolicy>
    name: CertificatePolicy>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CertificatePolicy
        fullName: CertificatePolicy
        uid: '@azure/keyvault-certificates.CertificatePolicy'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.GetCertificateVersionOptions'
    name: GetCertificateVersionOptions
    spec.typeScript:
      - name: GetCertificateVersionOptions
        fullName: GetCertificateVersionOptions
        uid: '@azure/keyvault-certificates.GetCertificateVersionOptions'
  - uid: Promise<@azure/keyvault-certificates.KeyVaultCertificate>
    name: KeyVaultCertificate>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: KeyVaultCertificate
        fullName: KeyVaultCertificate
        uid: '@azure/keyvault-certificates.KeyVaultCertificate'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.GetContactsOptions'
    name: GetContactsOptions
    spec.typeScript:
      - name: GetContactsOptions
        fullName: GetContactsOptions
        uid: '@azure/keyvault-certificates.GetContactsOptions'
  - uid: '@azure/keyvault-certificates.GetDeletedCertificateOptions'
    name: GetDeletedCertificateOptions
    spec.typeScript:
      - name: GetDeletedCertificateOptions
        fullName: GetDeletedCertificateOptions
        uid: '@azure/keyvault-certificates.GetDeletedCertificateOptions'
  - uid: Promise<@azure/keyvault-certificates.DeletedCertificate>
    name: DeletedCertificate>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DeletedCertificate
        fullName: DeletedCertificate
        uid: '@azure/keyvault-certificates.DeletedCertificate'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.GetIssuerOptions'
    name: GetIssuerOptions
    spec.typeScript:
      - name: GetIssuerOptions
        fullName: GetIssuerOptions
        uid: '@azure/keyvault-certificates.GetIssuerOptions'
  - uid: '@azure/keyvault-certificates.ImportCertificateOptions'
    name: ImportCertificateOptions
    spec.typeScript:
      - name: ImportCertificateOptions
        fullName: ImportCertificateOptions
        uid: '@azure/keyvault-certificates.ImportCertificateOptions'
  - uid: '@azure/keyvault-certificates.ListDeletedCertificatesOptions'
    name: ListDeletedCertificatesOptions
    spec.typeScript:
      - name: ListDeletedCertificatesOptions
        fullName: ListDeletedCertificatesOptions
        uid: '@azure/keyvault-certificates.ListDeletedCertificatesOptions'
  - uid: >-
      PagedAsyncIterableIterator<@azure/keyvault-certificates.DeletedCertificate>
    name: DeletedCertificate>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: DeletedCertificate
        fullName: DeletedCertificate
        uid: '@azure/keyvault-certificates.DeletedCertificate'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.ListPropertiesOfCertificateVersionsOptions'
    name: ListPropertiesOfCertificateVersionsOptions
    spec.typeScript:
      - name: ListPropertiesOfCertificateVersionsOptions
        fullName: ListPropertiesOfCertificateVersionsOptions
        uid: >-
          @azure/keyvault-certificates.ListPropertiesOfCertificateVersionsOptions
  - uid: >-
      PagedAsyncIterableIterator<@azure/keyvault-certificates.CertificateProperties>
    name: CertificateProperties>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: CertificateProperties
        fullName: CertificateProperties
        uid: '@azure/keyvault-certificates.CertificateProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.ListPropertiesOfCertificatesOptions'
    name: ListPropertiesOfCertificatesOptions
    spec.typeScript:
      - name: ListPropertiesOfCertificatesOptions
        fullName: ListPropertiesOfCertificatesOptions
        uid: '@azure/keyvault-certificates.ListPropertiesOfCertificatesOptions'
  - uid: '@azure/keyvault-certificates.ListPropertiesOfIssuersOptions'
    name: ListPropertiesOfIssuersOptions
    spec.typeScript:
      - name: ListPropertiesOfIssuersOptions
        fullName: ListPropertiesOfIssuersOptions
        uid: '@azure/keyvault-certificates.ListPropertiesOfIssuersOptions'
  - uid: PagedAsyncIterableIterator<@azure/keyvault-certificates.IssuerProperties>
    name: IssuerProperties>
    spec.typeScript:
      - name: PagedAsyncIterableIterator<
        fullName: PagedAsyncIterableIterator<
      - name: IssuerProperties
        fullName: IssuerProperties
        uid: '@azure/keyvault-certificates.IssuerProperties'
      - name: '>'
        fullName: '>'
  - uid: '@azure/keyvault-certificates.MergeCertificateOptions'
    name: MergeCertificateOptions
    spec.typeScript:
      - name: MergeCertificateOptions
        fullName: MergeCertificateOptions
        uid: '@azure/keyvault-certificates.MergeCertificateOptions'
  - uid: '@azure/keyvault-certificates.PurgeDeletedCertificateOptions'
    name: PurgeDeletedCertificateOptions
    spec.typeScript:
      - name: PurgeDeletedCertificateOptions
        fullName: PurgeDeletedCertificateOptions
        uid: '@azure/keyvault-certificates.PurgeDeletedCertificateOptions'
  - uid: '@azure/keyvault-certificates.RestoreCertificateBackupOptions'
    name: RestoreCertificateBackupOptions
    spec.typeScript:
      - name: RestoreCertificateBackupOptions
        fullName: RestoreCertificateBackupOptions
        uid: '@azure/keyvault-certificates.RestoreCertificateBackupOptions'
  - uid: '@azure/keyvault-certificates.CertificateContact[]'
    name: 'CertificateContact[]'
    spec.typeScript:
      - name: CertificateContact
        fullName: CertificateContact
        uid: '@azure/keyvault-certificates.CertificateContact'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/keyvault-certificates.SetContactsOptions'
    name: SetContactsOptions
    spec.typeScript:
      - name: SetContactsOptions
        fullName: SetContactsOptions
        uid: '@azure/keyvault-certificates.SetContactsOptions'
  - uid: '@azure/keyvault-certificates.UpdateCertificatePolicyOptions'
    name: UpdateCertificatePolicyOptions
    spec.typeScript:
      - name: UpdateCertificatePolicyOptions
        fullName: UpdateCertificatePolicyOptions
        uid: '@azure/keyvault-certificates.UpdateCertificatePolicyOptions'
  - uid: '@azure/keyvault-certificates.UpdateCertificateOptions'
    name: UpdateCertificateOptions
    spec.typeScript:
      - name: UpdateCertificateOptions
        fullName: UpdateCertificateOptions
        uid: '@azure/keyvault-certificates.UpdateCertificateOptions'
  - uid: '@azure/keyvault-certificates.UpdateIssuerOptions'
    name: UpdateIssuerOptions
    spec.typeScript:
      - name: UpdateIssuerOptions
        fullName: UpdateIssuerOptions
        uid: '@azure/keyvault-certificates.UpdateIssuerOptions'
